// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: network.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProverNetwork_RequestProof_FullMethodName                      = "/network.ProverNetwork/RequestProof"
	ProverNetwork_FulfillProof_FullMethodName                      = "/network.ProverNetwork/FulfillProof"
	ProverNetwork_ExecuteProof_FullMethodName                      = "/network.ProverNetwork/ExecuteProof"
	ProverNetwork_FailFulfillment_FullMethodName                   = "/network.ProverNetwork/FailFulfillment"
	ProverNetwork_GetProofRequestStatus_FullMethodName             = "/network.ProverNetwork/GetProofRequestStatus"
	ProverNetwork_GetProofRequestDetails_FullMethodName            = "/network.ProverNetwork/GetProofRequestDetails"
	ProverNetwork_GetFilteredProofRequests_FullMethodName          = "/network.ProverNetwork/GetFilteredProofRequests"
	ProverNetwork_SubscribeProofRequests_FullMethodName            = "/network.ProverNetwork/SubscribeProofRequests"
	ProverNetwork_GetSearchResults_FullMethodName                  = "/network.ProverNetwork/GetSearchResults"
	ProverNetwork_GetProofRequestMetrics_FullMethodName            = "/network.ProverNetwork/GetProofRequestMetrics"
	ProverNetwork_GetProofRequestGraph_FullMethodName              = "/network.ProverNetwork/GetProofRequestGraph"
	ProverNetwork_GetAnalyticsGraphs_FullMethodName                = "/network.ProverNetwork/GetAnalyticsGraphs"
	ProverNetwork_GetOverviewGraphs_FullMethodName                 = "/network.ProverNetwork/GetOverviewGraphs"
	ProverNetwork_GetProofRequestParams_FullMethodName             = "/network.ProverNetwork/GetProofRequestParams"
	ProverNetwork_GetNonce_FullMethodName                          = "/network.ProverNetwork/GetNonce"
	ProverNetwork_SetAccountName_FullMethodName                    = "/network.ProverNetwork/SetAccountName"
	ProverNetwork_GetAccountName_FullMethodName                    = "/network.ProverNetwork/GetAccountName"
	ProverNetwork_GetTermsSignature_FullMethodName                 = "/network.ProverNetwork/GetTermsSignature"
	ProverNetwork_SetTermsSignature_FullMethodName                 = "/network.ProverNetwork/SetTermsSignature"
	ProverNetwork_GetAccount_FullMethodName                        = "/network.ProverNetwork/GetAccount"
	ProverNetwork_GetOwner_FullMethodName                          = "/network.ProverNetwork/GetOwner"
	ProverNetwork_GetProgram_FullMethodName                        = "/network.ProverNetwork/GetProgram"
	ProverNetwork_CreateProgram_FullMethodName                     = "/network.ProverNetwork/CreateProgram"
	ProverNetwork_SetProgramName_FullMethodName                    = "/network.ProverNetwork/SetProgramName"
	ProverNetwork_GetBalance_FullMethodName                        = "/network.ProverNetwork/GetBalance"
	ProverNetwork_GetFilteredBalanceLogs_FullMethodName            = "/network.ProverNetwork/GetFilteredBalanceLogs"
	ProverNetwork_AddCredit_FullMethodName                         = "/network.ProverNetwork/AddCredit"
	ProverNetwork_GetLatestBridgeBlock_FullMethodName              = "/network.ProverNetwork/GetLatestBridgeBlock"
	ProverNetwork_GetGasPriceEstimate_FullMethodName               = "/network.ProverNetwork/GetGasPriceEstimate"
	ProverNetwork_GetTransactionDetails_FullMethodName             = "/network.ProverNetwork/GetTransactionDetails"
	ProverNetwork_AddReservedCharge_FullMethodName                 = "/network.ProverNetwork/AddReservedCharge"
	ProverNetwork_GetBillingSummary_FullMethodName                 = "/network.ProverNetwork/GetBillingSummary"
	ProverNetwork_UpdatePrice_FullMethodName                       = "/network.ProverNetwork/UpdatePrice"
	ProverNetwork_GetFilteredClusters_FullMethodName               = "/network.ProverNetwork/GetFilteredClusters"
	ProverNetwork_GetUsageSummary_FullMethodName                   = "/network.ProverNetwork/GetUsageSummary"
	ProverNetwork_Transfer_FullMethodName                          = "/network.ProverNetwork/Transfer"
	ProverNetwork_GetWithdrawParams_FullMethodName                 = "/network.ProverNetwork/GetWithdrawParams"
	ProverNetwork_Withdraw_FullMethodName                          = "/network.ProverNetwork/Withdraw"
	ProverNetwork_GetFilteredReservations_FullMethodName           = "/network.ProverNetwork/GetFilteredReservations"
	ProverNetwork_AddReservation_FullMethodName                    = "/network.ProverNetwork/AddReservation"
	ProverNetwork_RemoveReservation_FullMethodName                 = "/network.ProverNetwork/RemoveReservation"
	ProverNetwork_Bid_FullMethodName                               = "/network.ProverNetwork/Bid"
	ProverNetwork_Settle_FullMethodName                            = "/network.ProverNetwork/Settle"
	ProverNetwork_GetProversByUptime_FullMethodName                = "/network.ProverNetwork/GetProversByUptime"
	ProverNetwork_SignIn_FullMethodName                            = "/network.ProverNetwork/SignIn"
	ProverNetwork_GetOnboardedAccountsCount_FullMethodName         = "/network.ProverNetwork/GetOnboardedAccountsCount"
	ProverNetwork_GetFilteredOnboardedAccounts_FullMethodName      = "/network.ProverNetwork/GetFilteredOnboardedAccounts"
	ProverNetwork_GetLeaderboard_FullMethodName                    = "/network.ProverNetwork/GetLeaderboard"
	ProverNetwork_GetLeaderboardStats_FullMethodName               = "/network.ProverNetwork/GetLeaderboardStats"
	ProverNetwork_GetCodes_FullMethodName                          = "/network.ProverNetwork/GetCodes"
	ProverNetwork_RedeemCode_FullMethodName                        = "/network.ProverNetwork/RedeemCode"
	ProverNetwork_ConnectTwitter_FullMethodName                    = "/network.ProverNetwork/ConnectTwitter"
	ProverNetwork_CompleteOnboarding_FullMethodName                = "/network.ProverNetwork/CompleteOnboarding"
	ProverNetwork_SetUseTwitterHandle_FullMethodName               = "/network.ProverNetwork/SetUseTwitterHandle"
	ProverNetwork_SetUseTwitterImage_FullMethodName                = "/network.ProverNetwork/SetUseTwitterImage"
	ProverNetwork_RequestRandomProof_FullMethodName                = "/network.ProverNetwork/RequestRandomProof"
	ProverNetwork_SubmitCaptchaGame_FullMethodName                 = "/network.ProverNetwork/SubmitCaptchaGame"
	ProverNetwork_RedeemStars_FullMethodName                       = "/network.ProverNetwork/RedeemStars"
	ProverNetwork_GetFlappyLeaderboard_FullMethodName              = "/network.ProverNetwork/GetFlappyLeaderboard"
	ProverNetwork_SetTurboHighScore_FullMethodName                 = "/network.ProverNetwork/SetTurboHighScore"
	ProverNetwork_SubmitQuizGame_FullMethodName                    = "/network.ProverNetwork/SubmitQuizGame"
	ProverNetwork_GetTurboLeaderboard_FullMethodName               = "/network.ProverNetwork/GetTurboLeaderboard"
	ProverNetwork_SubmitEthBlockMetadata_FullMethodName            = "/network.ProverNetwork/SubmitEthBlockMetadata"
	ProverNetwork_GetFilteredEthBlockRequests_FullMethodName       = "/network.ProverNetwork/GetFilteredEthBlockRequests"
	ProverNetwork_Set2048HighScore_FullMethodName                  = "/network.ProverNetwork/Set2048HighScore"
	ProverNetwork_SetVolleyballHighScore_FullMethodName            = "/network.ProverNetwork/SetVolleyballHighScore"
	ProverNetwork_GetEthBlockRequestMetrics_FullMethodName         = "/network.ProverNetwork/GetEthBlockRequestMetrics"
	ProverNetwork_SetTurboTimeTrialHighScore_FullMethodName        = "/network.ProverNetwork/SetTurboTimeTrialHighScore"
	ProverNetwork_SetCoinCrazeHighScore_FullMethodName             = "/network.ProverNetwork/SetCoinCrazeHighScore"
	ProverNetwork_SetLeanHighScore_FullMethodName                  = "/network.ProverNetwork/SetLeanHighScore"
	ProverNetwork_SetFlowHighScore_FullMethodName                  = "/network.ProverNetwork/SetFlowHighScore"
	ProverNetwork_SetRollupHighScore_FullMethodName                = "/network.ProverNetwork/SetRollupHighScore"
	ProverNetwork_GetPendingStars_FullMethodName                   = "/network.ProverNetwork/GetPendingStars"
	ProverNetwork_GetWhitelistStatus_FullMethodName                = "/network.ProverNetwork/GetWhitelistStatus"
	ProverNetwork_ClaimGpu_FullMethodName                          = "/network.ProverNetwork/ClaimGpu"
	ProverNetwork_SetGpuVariant_FullMethodName                     = "/network.ProverNetwork/SetGpuVariant"
	ProverNetwork_LinkWhitelistedTwitter_FullMethodName            = "/network.ProverNetwork/LinkWhitelistedTwitter"
	ProverNetwork_RetrieveProvingKey_FullMethodName                = "/network.ProverNetwork/RetrieveProvingKey"
	ProverNetwork_LinkWhitelistedGithub_FullMethodName             = "/network.ProverNetwork/LinkWhitelistedGithub"
	ProverNetwork_LinkWhitelistedDiscord_FullMethodName            = "/network.ProverNetwork/LinkWhitelistedDiscord"
	ProverNetwork_GetProverLeaderboard_FullMethodName              = "/network.ProverNetwork/GetProverLeaderboard"
	ProverNetwork_GetFilteredGpus_FullMethodName                   = "/network.ProverNetwork/GetFilteredGpus"
	ProverNetwork_SetGpuCoordinates_FullMethodName                 = "/network.ProverNetwork/SetGpuCoordinates"
	ProverNetwork_GetPoints_FullMethodName                         = "/network.ProverNetwork/GetPoints"
	ProverNetwork_ProcessClicks_FullMethodName                     = "/network.ProverNetwork/ProcessClicks"
	ProverNetwork_PurchaseUpgrade_FullMethodName                   = "/network.ProverNetwork/PurchaseUpgrade"
	ProverNetwork_Bet_FullMethodName                               = "/network.ProverNetwork/Bet"
	ProverNetwork_GetContestDetails_FullMethodName                 = "/network.ProverNetwork/GetContestDetails"
	ProverNetwork_GetLatestContest_FullMethodName                  = "/network.ProverNetwork/GetLatestContest"
	ProverNetwork_GetContestBettors_FullMethodName                 = "/network.ProverNetwork/GetContestBettors"
	ProverNetwork_GetGpuMetrics_FullMethodName                     = "/network.ProverNetwork/GetGpuMetrics"
	ProverNetwork_GetFilteredProverActivity_FullMethodName         = "/network.ProverNetwork/GetFilteredProverActivity"
	ProverNetwork_GetProverMetrics_FullMethodName                  = "/network.ProverNetwork/GetProverMetrics"
	ProverNetwork_GetFilteredBetHistory_FullMethodName             = "/network.ProverNetwork/GetFilteredBetHistory"
	ProverNetwork_GetGpuTeamStats_FullMethodName                   = "/network.ProverNetwork/GetGpuTeamStats"
	ProverNetwork_GetConfigValues_FullMethodName                   = "/network.ProverNetwork/GetConfigValues"
	ProverNetwork_GetProverStats_FullMethodName                    = "/network.ProverNetwork/GetProverStats"
	ProverNetwork_GetFilteredProverStats_FullMethodName            = "/network.ProverNetwork/GetFilteredProverStats"
	ProverNetwork_GetProverStatsDetail_FullMethodName              = "/network.ProverNetwork/GetProverStatsDetail"
	ProverNetwork_GetProverSearchResults_FullMethodName            = "/network.ProverNetwork/GetProverSearchResults"
	ProverNetwork_GetFilteredBidHistory_FullMethodName             = "/network.ProverNetwork/GetFilteredBidHistory"
	ProverNetwork_GetTEEWhitelistStatus_FullMethodName             = "/network.ProverNetwork/GetTEEWhitelistStatus"
	ProverNetwork_GetSettlementRequest_FullMethodName              = "/network.ProverNetwork/GetSettlementRequest"
	ProverNetwork_GetFilteredSettlementRequests_FullMethodName     = "/network.ProverNetwork/GetFilteredSettlementRequests"
	ProverNetwork_GetFilteredProvers_FullMethodName                = "/network.ProverNetwork/GetFilteredProvers"
	ProverNetwork_GetProverStakeBalance_FullMethodName             = "/network.ProverNetwork/GetProverStakeBalance"
	ProverNetwork_GetFilteredStakerStakeBalanceLogs_FullMethodName = "/network.ProverNetwork/GetFilteredStakerStakeBalanceLogs"
	ProverNetwork_GetFilteredProverStakeBalanceLogs_FullMethodName = "/network.ProverNetwork/GetFilteredProverStakeBalanceLogs"
	ProverNetwork_GetDelegationParams_FullMethodName               = "/network.ProverNetwork/GetDelegationParams"
	ProverNetwork_SetDelegation_FullMethodName                     = "/network.ProverNetwork/SetDelegation"
	ProverNetwork_GetDelegation_FullMethodName                     = "/network.ProverNetwork/GetDelegation"
	ProverNetwork_GetFilteredWithdrawalReceipts_FullMethodName     = "/network.ProverNetwork/GetFilteredWithdrawalReceipts"
)

// ProverNetworkClient is the client API for ProverNetwork service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProverNetworkClient interface {
	// Creates a proof request.
	RequestProof(ctx context.Context, in *RequestProofRequest, opts ...grpc.CallOption) (*RequestProofResponse, error)
	// Fulfills a proof request. Only callable by the assigned fulfiller.
	FulfillProof(ctx context.Context, in *FulfillProofRequest, opts ...grpc.CallOption) (*FulfillProofResponse, error)
	// Executes a proof request. Only callable by the execution oracle.
	ExecuteProof(ctx context.Context, in *ExecuteProofRequest, opts ...grpc.CallOption) (*ExecuteProofResponse, error)
	// Fails fulfillment. Only callable by the assigned fulfiller.
	FailFulfillment(ctx context.Context, in *FailFulfillmentRequest, opts ...grpc.CallOption) (*FailFulfillmentResponse, error)
	// Get the status of a proof request.
	GetProofRequestStatus(ctx context.Context, in *GetProofRequestStatusRequest, opts ...grpc.CallOption) (*GetProofRequestStatusResponse, error)
	// Get the details of a proof request.
	GetProofRequestDetails(ctx context.Context, in *GetProofRequestDetailsRequest, opts ...grpc.CallOption) (*GetProofRequestDetailsResponse, error)
	// Get the proof requests that meet the filter criteria.
	GetFilteredProofRequests(ctx context.Context, in *GetFilteredProofRequestsRequest, opts ...grpc.CallOption) (*GetFilteredProofRequestsResponse, error)
	// Subscribe to proof requests that meet the filter criteria.
	SubscribeProofRequests(ctx context.Context, in *GetFilteredProofRequestsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProofRequest], error)
	// Search for proof requests, programs, and requesters.
	GetSearchResults(ctx context.Context, in *GetSearchResultsRequest, opts ...grpc.CallOption) (*GetSearchResultsResponse, error)
	// Get metrics for proof requests.
	GetProofRequestMetrics(ctx context.Context, in *GetProofRequestMetricsRequest, opts ...grpc.CallOption) (*GetProofRequestMetricsResponse, error)
	// Get time series data for proof requests.
	GetProofRequestGraph(ctx context.Context, in *GetProofRequestGraphRequest, opts ...grpc.CallOption) (*GetProofRequestGraphResponse, error)
	// Get analytics graphs for proof requests.
	GetAnalyticsGraphs(ctx context.Context, in *GetAnalyticsGraphsRequest, opts ...grpc.CallOption) (*GetAnalyticsGraphsResponse, error)
	// Get overview graphs for proof requests.
	GetOverviewGraphs(ctx context.Context, in *GetOverviewGraphsRequest, opts ...grpc.CallOption) (*GetOverviewGraphsResponse, error)
	// Get network proof request parameters.
	GetProofRequestParams(ctx context.Context, in *GetProofRequestParamsRequest, opts ...grpc.CallOption) (*GetProofRequestParamsResponse, error)
	// Get the nonce of the account.
	GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error)
	// Set the name of the account.
	SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameResponse, error)
	// Get the name of the account.
	GetAccountName(ctx context.Context, in *GetAccountNameRequest, opts ...grpc.CallOption) (*GetAccountNameResponse, error)
	// Get whether the account has signed the terms.
	GetTermsSignature(ctx context.Context, in *GetTermsSignatureRequest, opts ...grpc.CallOption) (*GetTermsSignatureResponse, error)
	// Set whether the account has signed the terms.
	SetTermsSignature(ctx context.Context, in *SetTermsSignatureRequest, opts ...grpc.CallOption) (*SetTermsSignatureResponse, error)
	// Get all the information about an account.
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
	// Get the owner of an account. Returns itself if the account is not delegated.
	GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerResponse, error)
	// Get metadata about a program.
	GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error)
	// Create a new program. Must be called before requesting proofs.
	CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error)
	// Set the name of the program. Only callable by the owner.
	SetProgramName(ctx context.Context, in *SetProgramNameRequest, opts ...grpc.CallOption) (*SetProgramNameResponse, error)
	// Get the available balance of an account.
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	// Get the balance logs that meet the filter criteria.
	GetFilteredBalanceLogs(ctx context.Context, in *GetFilteredBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredBalanceLogsResponse, error)
	// Add credit to an account.
	AddCredit(ctx context.Context, in *AddCreditRequest, opts ...grpc.CallOption) (*AddCreditResponse, error)
	// Get the latest processed block in the bridge.
	GetLatestBridgeBlock(ctx context.Context, in *GetLatestBridgeBlockRequest, opts ...grpc.CallOption) (*GetLatestBridgeBlockResponse, error)
	// Get the gas price estimate for a given fulfillment strategy.
	GetGasPriceEstimate(ctx context.Context, in *GetGasPriceEstimateRequest, opts ...grpc.CallOption) (*GetGasPriceEstimateResponse, error)
	// Get the details of a transaction.
	GetTransactionDetails(ctx context.Context, in *GetTransactionDetailsRequest, opts ...grpc.CallOption) (*GetTransactionDetailsResponse, error)
	// Add a charge to an account.
	AddReservedCharge(ctx context.Context, in *AddReservedChargeRequest, opts ...grpc.CallOption) (*AddReservedChargeResponse, error)
	// Get prorated billing summary by month for a specified payer.
	GetBillingSummary(ctx context.Context, in *GetBillingSummaryRequest, opts ...grpc.CallOption) (*GetBillingSummaryResponse, error)
	// Update the charge type price for a reservation.
	UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error)
	// Get filtered and paginated clusters/fulfillers with prices.
	GetFilteredClusters(ctx context.Context, in *GetFilteredClustersRequest, opts ...grpc.CallOption) (*GetFilteredClustersResponse, error)
	// Get usage summary by month for a specified payer.
	GetUsageSummary(ctx context.Context, in *GetUsageSummaryRequest, opts ...grpc.CallOption) (*GetUsageSummaryResponse, error)
	// Transfer $PROVE from one account to another.
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
	// Get withdraw parameters.
	GetWithdrawParams(ctx context.Context, in *GetWithdrawParamsRequest, opts ...grpc.CallOption) (*GetWithdrawParamsResponse, error)
	// Withdraw $PROVE from an account.
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	// Get the reservations that meet the filter criteria.
	GetFilteredReservations(ctx context.Context, in *GetFilteredReservationsRequest, opts ...grpc.CallOption) (*GetFilteredReservationsResponse, error)
	// Add a reservation for a requester.
	AddReservation(ctx context.Context, in *AddReservationRequest, opts ...grpc.CallOption) (*AddReservationResponse, error)
	// Remove a reservation for a requester.
	RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*RemoveReservationResponse, error)
	// Bid for a proof request. Provers that want to be assigned this request must first
	// bid on it.
	Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	// Settle the bids on a proof request to choose the assigned prover. Only callable by
	// the approved auctioneer.
	Settle(ctx context.Context, in *SettleRequest, opts ...grpc.CallOption) (*SettleResponse, error)
	// Get the provers that have historically had reliable uptime.
	GetProversByUptime(ctx context.Context, in *GetProversByUptimeRequest, opts ...grpc.CallOption) (*GetProversByUptimeResponse, error)
	// Sign in with Ethereum
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error)
	// Get the accounts that meet the filter criteria.
	GetOnboardedAccountsCount(ctx context.Context, in *GetOnboardedAccountsCountRequest, opts ...grpc.CallOption) (*GetOnboardedAccountsCountResponse, error)
	// Get the accounts that have joined the leaderboard.
	GetFilteredOnboardedAccounts(ctx context.Context, in *GetFilteredOnboardedAccountsRequest, opts ...grpc.CallOption) (*GetFilteredOnboardedAccountsResponse, error)
	// Get the leaderboard.
	GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error)
	// Get the leaderboard stats for a given account.
	GetLeaderboardStats(ctx context.Context, in *GetLeaderboardStatsRequest, opts ...grpc.CallOption) (*GetLeaderboardStatsResponse, error)
	// Get codes.
	GetCodes(ctx context.Context, in *GetCodesRequest, opts ...grpc.CallOption) (*GetCodesResponse, error)
	// Redeem a code.
	RedeemCode(ctx context.Context, in *RedeemCodeRequest, opts ...grpc.CallOption) (*RedeemCodeResponse, error)
	// Connect a Twitter account.
	ConnectTwitter(ctx context.Context, in *ConnectTwitterRequest, opts ...grpc.CallOption) (*ConnectTwitterResponse, error)
	// Complete onboarding.
	CompleteOnboarding(ctx context.Context, in *CompleteOnboardingRequest, opts ...grpc.CallOption) (*CompleteOnboardingResponse, error)
	// Set if a user should display their Twitter handle.
	SetUseTwitterHandle(ctx context.Context, in *SetUseTwitterHandleRequest, opts ...grpc.CallOption) (*SetUseTwitterHandleResponse, error)
	// Set if a user should display their Twitter profile picture.
	SetUseTwitterImage(ctx context.Context, in *SetUseTwitterImageRequest, opts ...grpc.CallOption) (*SetUseTwitterImageResponse, error)
	// Request a random proof.
	RequestRandomProof(ctx context.Context, in *RequestRandomProofRequest, opts ...grpc.CallOption) (*RequestRandomProofResponse, error)
	// Submit answers for the captcha game.
	SubmitCaptchaGame(ctx context.Context, in *SubmitCaptchaGameRequest, opts ...grpc.CallOption) (*SubmitCaptchaGameResponse, error)
	// Redeem stars.
	RedeemStars(ctx context.Context, in *RedeemStarsRequest, opts ...grpc.CallOption) (*RedeemStarsResponse, error)
	// Get flappy leaderboard.
	GetFlappyLeaderboard(ctx context.Context, in *GetFlappyLeaderboardRequest, opts ...grpc.CallOption) (*GetFlappyLeaderboardResponse, error)
	// Set the turbo game high score.
	SetTurboHighScore(ctx context.Context, in *SetTurboHighScoreRequest, opts ...grpc.CallOption) (*SetTurboHighScoreResponse, error)
	// Submit answers for the quiz game.
	SubmitQuizGame(ctx context.Context, in *SubmitQuizGameRequest, opts ...grpc.CallOption) (*SubmitQuizGameResponse, error)
	// Get the turbo game leaderboard.
	GetTurboLeaderboard(ctx context.Context, in *GetTurboLeaderboardRequest, opts ...grpc.CallOption) (*GetTurboLeaderboardResponse, error)
	// Submit ETH block metadata.
	SubmitEthBlockMetadata(ctx context.Context, in *SubmitEthBlockMetadataRequest, opts ...grpc.CallOption) (*SubmitEthBlockMetadataResponse, error)
	// Get ETH block requests that meet the filter criteria.
	GetFilteredEthBlockRequests(ctx context.Context, in *GetFilteredEthBlockRequestsRequest, opts ...grpc.CallOption) (*GetFilteredEthBlockRequestsResponse, error)
	// Set the 2048 game high score.
	Set2048HighScore(ctx context.Context, in *Set2048HighScoreRequest, opts ...grpc.CallOption) (*Set2048HighScoreResponse, error)
	// Set the volleyball game high score.
	SetVolleyballHighScore(ctx context.Context, in *SetVolleyballHighScoreRequest, opts ...grpc.CallOption) (*SetVolleyballHighScoreResponse, error)
	// Get ETH block proof requests metrics.
	GetEthBlockRequestMetrics(ctx context.Context, in *GetEthBlockRequestMetricsRequest, opts ...grpc.CallOption) (*GetEthBlockRequestMetricsResponse, error)
	// Set the turbo time trial high score.
	SetTurboTimeTrialHighScore(ctx context.Context, in *SetTurboTimeTrialHighScoreRequest, opts ...grpc.CallOption) (*SetTurboTimeTrialHighScoreResponse, error)
	// Set the coin craze high score.
	SetCoinCrazeHighScore(ctx context.Context, in *SetCoinCrazeHighScoreRequest, opts ...grpc.CallOption) (*SetCoinCrazeHighScoreResponse, error)
	// Set the lean high score.
	SetLeanHighScore(ctx context.Context, in *SetLeanHighScoreRequest, opts ...grpc.CallOption) (*SetLeanHighScoreResponse, error)
	// Set the flow high score.
	SetFlowHighScore(ctx context.Context, in *SetFlowHighScoreRequest, opts ...grpc.CallOption) (*SetFlowHighScoreResponse, error)
	// Set the rollup high score.
	SetRollupHighScore(ctx context.Context, in *SetRollupHighScoreRequest, opts ...grpc.CallOption) (*SetRollupHighScoreResponse, error)
	// Get the pending stars for an account.
	GetPendingStars(ctx context.Context, in *GetPendingStarsRequest, opts ...grpc.CallOption) (*GetPendingStarsResponse, error)
	// Check if address or social identity is whitelisted.
	GetWhitelistStatus(ctx context.Context, in *GetWhitelistStatusRequest, opts ...grpc.CallOption) (*GetWhitelistStatusResponse, error)
	// Claim a gpu.
	ClaimGpu(ctx context.Context, in *ClaimGpuRequest, opts ...grpc.CallOption) (*ClaimGpuResponse, error)
	// Set the gpu variant.
	SetGpuVariant(ctx context.Context, in *SetGpuVariantRequest, opts ...grpc.CallOption) (*SetGpuVariantResponse, error)
	// Link a whitelisted twitter account.
	LinkWhitelistedTwitter(ctx context.Context, in *LinkWhitelistedTwitterRequest, opts ...grpc.CallOption) (*LinkWhitelistedTwitterResponse, error)
	// Retrieve the proving key for your account. Must have claimed a gpu and self-delegated to
	// yourself.
	RetrieveProvingKey(ctx context.Context, in *RetrieveProvingKeyRequest, opts ...grpc.CallOption) (*RetrieveProvingKeyResponse, error)
	// Link a whitelisted github account.
	LinkWhitelistedGithub(ctx context.Context, in *LinkWhitelistedGithubRequest, opts ...grpc.CallOption) (*LinkWhitelistedGithubResponse, error)
	// Link a whitelisted discord account.
	LinkWhitelistedDiscord(ctx context.Context, in *LinkWhitelistedDiscordRequest, opts ...grpc.CallOption) (*LinkWhitelistedDiscordResponse, error)
	// Get prover leaderboard.
	GetProverLeaderboard(ctx context.Context, in *GetProverLeaderboardRequest, opts ...grpc.CallOption) (*GetProverLeaderboardResponse, error)
	// Get filtered gpus.
	GetFilteredGpus(ctx context.Context, in *GetFilteredGpusRequest, opts ...grpc.CallOption) (*GetFilteredGpusResponse, error)
	// Set the gpu coordinates.
	SetGpuCoordinates(ctx context.Context, in *SetGpuCoordinatesRequest, opts ...grpc.CallOption) (*SetGpuCoordinatesResponse, error)
	// Get points.
	GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*GetPointsResponse, error)
	// Process clicks.
	ProcessClicks(ctx context.Context, in *ProcessClicksRequest, opts ...grpc.CallOption) (*ProcessClicksResponse, error)
	// Purchase upgrade.
	PurchaseUpgrade(ctx context.Context, in *PurchaseUpgradeRequest, opts ...grpc.CallOption) (*PurchaseUpgradeResponse, error)
	// Place a bet.
	Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error)
	// Get the status of a proof contest.
	GetContestDetails(ctx context.Context, in *GetContestDetailsRequest, opts ...grpc.CallOption) (*GetContestDetailsResponse, error)
	// Get latest contest id.
	GetLatestContest(ctx context.Context, in *GetLatestContestRequest, opts ...grpc.CallOption) (*GetLatestContestResponse, error)
	// Get contest bettors.
	GetContestBettors(ctx context.Context, in *GetContestBettorsRequest, opts ...grpc.CallOption) (*GetContestBettorsResponse, error)
	// Get gpu metrics.
	GetGpuMetrics(ctx context.Context, in *GetGpuMetricsRequest, opts ...grpc.CallOption) (*GetGpuMetricsResponse, error)
	// Get filtered prover activity.
	GetFilteredProverActivity(ctx context.Context, in *GetFilteredProverActivityRequest, opts ...grpc.CallOption) (*GetFilteredProverActivityResponse, error)
	// Get prover metrics.
	GetProverMetrics(ctx context.Context, in *GetProverMetricsRequest, opts ...grpc.CallOption) (*GetProverMetricsResponse, error)
	// Get filtered bet history.
	GetFilteredBetHistory(ctx context.Context, in *GetFilteredBetHistoryRequest, opts ...grpc.CallOption) (*GetFilteredBetHistoryResponse, error)
	// Get gpu team stats.
	GetGpuTeamStats(ctx context.Context, in *GetGpuTeamStatsRequest, opts ...grpc.CallOption) (*GetGpuTeamStatsResponse, error)
	// Get the config values.
	GetConfigValues(ctx context.Context, in *GetConfigValuesRequest, opts ...grpc.CallOption) (*GetConfigValuesResponse, error)
	// Get metrics for a specific prover
	GetProverStats(ctx context.Context, in *GetProverStatsRequest, opts ...grpc.CallOption) (*GetProverStatsResponse, error)
	// Get statistics for all provers with pagination
	GetFilteredProverStats(ctx context.Context, in *GetFilteredProverStatsRequest, opts ...grpc.CallOption) (*GetFilteredProverStatsResponse, error)
	// Get detailed statistics for a single prover by address
	GetProverStatsDetail(ctx context.Context, in *GetProverStatsDetailRequest, opts ...grpc.CallOption) (*GetProverStatsDetailResponse, error)
	// Get search results for provers
	GetProverSearchResults(ctx context.Context, in *GetProverSearchResultsRequest, opts ...grpc.CallOption) (*GetProverSearchResultsResponse, error)
	// Get paginated auction history
	GetFilteredBidHistory(ctx context.Context, in *GetFilteredBidHistoryRequest, opts ...grpc.CallOption) (*GetFilteredBidHistoryResponse, error)
	// Check if the user is whitelisted to use the TEE service.
	GetTEEWhitelistStatus(ctx context.Context, in *GetTEEWhitelistStatusRequest, opts ...grpc.CallOption) (*GetTEEWhitelistStatusResponse, error)
	// Settlement
	//
	// These methods are for settling orders to L1.
	GetSettlementRequest(ctx context.Context, in *GetSettlementRequestRequest, opts ...grpc.CallOption) (*GetSettlementRequestResponse, error)
	GetFilteredSettlementRequests(ctx context.Context, in *GetFilteredSettlementRequestsRequest, opts ...grpc.CallOption) (*GetFilteredSettlementRequestsResponse, error)
	// Get the provers that meet the filter criteria.
	GetFilteredProvers(ctx context.Context, in *GetFilteredProversRequest, opts ...grpc.CallOption) (*GetFilteredProversResponse, error)
	// Get the available balance of a prover.
	GetProverStakeBalance(ctx context.Context, in *GetProverStakeBalanceRequest, opts ...grpc.CallOption) (*GetProverStakeBalanceResponse, error)
	// Get the staker balance logs that meet the filter criteria.
	GetFilteredStakerStakeBalanceLogs(ctx context.Context, in *GetFilteredStakerStakeBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredStakerStakeBalanceLogsResponse, error)
	// Get the prover balance logs that meet the filter criteria.
	GetFilteredProverStakeBalanceLogs(ctx context.Context, in *GetFilteredProverStakeBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredProverStakeBalanceLogsResponse, error)
	// Get the delegation parameters.
	GetDelegationParams(ctx context.Context, in *GetDelegationParamsRequest, opts ...grpc.CallOption) (*GetDelegationParamsResponse, error)
	// Set a delegation.
	SetDelegation(ctx context.Context, in *SetDelegationRequest, opts ...grpc.CallOption) (*SetDelegationResponse, error)
	// Get a delegation.
	GetDelegation(ctx context.Context, in *GetDelegationRequest, opts ...grpc.CallOption) (*GetDelegationResponse, error)
	// Get the withdrawal receipts of an account.
	GetFilteredWithdrawalReceipts(ctx context.Context, in *GetFilteredWithdrawalReceiptsRequest, opts ...grpc.CallOption) (*GetFilteredWithdrawalReceiptsResponse, error)
}

type proverNetworkClient struct {
	cc grpc.ClientConnInterface
}

func NewProverNetworkClient(cc grpc.ClientConnInterface) ProverNetworkClient {
	return &proverNetworkClient{cc}
}

func (c *proverNetworkClient) RequestProof(ctx context.Context, in *RequestProofRequest, opts ...grpc.CallOption) (*RequestProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestProofResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RequestProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) FulfillProof(ctx context.Context, in *FulfillProofRequest, opts ...grpc.CallOption) (*FulfillProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FulfillProofResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_FulfillProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) ExecuteProof(ctx context.Context, in *ExecuteProofRequest, opts ...grpc.CallOption) (*ExecuteProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExecuteProofResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_ExecuteProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) FailFulfillment(ctx context.Context, in *FailFulfillmentRequest, opts ...grpc.CallOption) (*FailFulfillmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FailFulfillmentResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_FailFulfillment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestStatus(ctx context.Context, in *GetProofRequestStatusRequest, opts ...grpc.CallOption) (*GetProofRequestStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestStatusResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestDetails(ctx context.Context, in *GetProofRequestDetailsRequest, opts ...grpc.CallOption) (*GetProofRequestDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestDetailsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredProofRequests(ctx context.Context, in *GetFilteredProofRequestsRequest, opts ...grpc.CallOption) (*GetFilteredProofRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredProofRequestsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredProofRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SubscribeProofRequests(ctx context.Context, in *GetFilteredProofRequestsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProofRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ProverNetwork_ServiceDesc.Streams[0], ProverNetwork_SubscribeProofRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetFilteredProofRequestsRequest, ProofRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProverNetwork_SubscribeProofRequestsClient = grpc.ServerStreamingClient[ProofRequest]

func (c *proverNetworkClient) GetSearchResults(ctx context.Context, in *GetSearchResultsRequest, opts ...grpc.CallOption) (*GetSearchResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchResultsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetSearchResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestMetrics(ctx context.Context, in *GetProofRequestMetricsRequest, opts ...grpc.CallOption) (*GetProofRequestMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestMetricsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestGraph(ctx context.Context, in *GetProofRequestGraphRequest, opts ...grpc.CallOption) (*GetProofRequestGraphResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestGraphResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestGraph_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetAnalyticsGraphs(ctx context.Context, in *GetAnalyticsGraphsRequest, opts ...grpc.CallOption) (*GetAnalyticsGraphsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAnalyticsGraphsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetAnalyticsGraphs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetOverviewGraphs(ctx context.Context, in *GetOverviewGraphsRequest, opts ...grpc.CallOption) (*GetOverviewGraphsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOverviewGraphsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetOverviewGraphs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProofRequestParams(ctx context.Context, in *GetProofRequestParamsRequest, opts ...grpc.CallOption) (*GetProofRequestParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProofRequestParamsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProofRequestParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetNonce(ctx context.Context, in *GetNonceRequest, opts ...grpc.CallOption) (*GetNonceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNonceResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetNonce_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetAccountName(ctx context.Context, in *SetAccountNameRequest, opts ...grpc.CallOption) (*SetAccountNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetAccountNameResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetAccountName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetAccountName(ctx context.Context, in *GetAccountNameRequest, opts ...grpc.CallOption) (*GetAccountNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountNameResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetAccountName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetTermsSignature(ctx context.Context, in *GetTermsSignatureRequest, opts ...grpc.CallOption) (*GetTermsSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTermsSignatureResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetTermsSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetTermsSignature(ctx context.Context, in *SetTermsSignatureRequest, opts ...grpc.CallOption) (*SetTermsSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTermsSignatureResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetTermsSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetOwner(ctx context.Context, in *GetOwnerRequest, opts ...grpc.CallOption) (*GetOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOwnerResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProgram(ctx context.Context, in *GetProgramRequest, opts ...grpc.CallOption) (*GetProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgramResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) CreateProgram(ctx context.Context, in *CreateProgramRequest, opts ...grpc.CallOption) (*CreateProgramResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProgramResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_CreateProgram_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetProgramName(ctx context.Context, in *SetProgramNameRequest, opts ...grpc.CallOption) (*SetProgramNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProgramNameResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetProgramName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredBalanceLogs(ctx context.Context, in *GetFilteredBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredBalanceLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredBalanceLogsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredBalanceLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) AddCredit(ctx context.Context, in *AddCreditRequest, opts ...grpc.CallOption) (*AddCreditResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCreditResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_AddCredit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetLatestBridgeBlock(ctx context.Context, in *GetLatestBridgeBlockRequest, opts ...grpc.CallOption) (*GetLatestBridgeBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestBridgeBlockResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetLatestBridgeBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetGasPriceEstimate(ctx context.Context, in *GetGasPriceEstimateRequest, opts ...grpc.CallOption) (*GetGasPriceEstimateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGasPriceEstimateResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetGasPriceEstimate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetTransactionDetails(ctx context.Context, in *GetTransactionDetailsRequest, opts ...grpc.CallOption) (*GetTransactionDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionDetailsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetTransactionDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) AddReservedCharge(ctx context.Context, in *AddReservedChargeRequest, opts ...grpc.CallOption) (*AddReservedChargeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReservedChargeResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_AddReservedCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetBillingSummary(ctx context.Context, in *GetBillingSummaryRequest, opts ...grpc.CallOption) (*GetBillingSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBillingSummaryResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetBillingSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) UpdatePrice(ctx context.Context, in *UpdatePriceRequest, opts ...grpc.CallOption) (*UpdatePriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePriceResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_UpdatePrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredClusters(ctx context.Context, in *GetFilteredClustersRequest, opts ...grpc.CallOption) (*GetFilteredClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredClustersResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetUsageSummary(ctx context.Context, in *GetUsageSummaryRequest, opts ...grpc.CallOption) (*GetUsageSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsageSummaryResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetUsageSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Transfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetWithdrawParams(ctx context.Context, in *GetWithdrawParamsRequest, opts ...grpc.CallOption) (*GetWithdrawParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawParamsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetWithdrawParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Withdraw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredReservations(ctx context.Context, in *GetFilteredReservationsRequest, opts ...grpc.CallOption) (*GetFilteredReservationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredReservationsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredReservations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) AddReservation(ctx context.Context, in *AddReservationRequest, opts ...grpc.CallOption) (*AddReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReservationResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_AddReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RemoveReservation(ctx context.Context, in *RemoveReservationRequest, opts ...grpc.CallOption) (*RemoveReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveReservationResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RemoveReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Bid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Bid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Settle(ctx context.Context, in *SettleRequest, opts ...grpc.CallOption) (*SettleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettleResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Settle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProversByUptime(ctx context.Context, in *GetProversByUptimeRequest, opts ...grpc.CallOption) (*GetProversByUptimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProversByUptimeResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProversByUptime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*SignInResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SignIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetOnboardedAccountsCount(ctx context.Context, in *GetOnboardedAccountsCountRequest, opts ...grpc.CallOption) (*GetOnboardedAccountsCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOnboardedAccountsCountResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetOnboardedAccountsCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredOnboardedAccounts(ctx context.Context, in *GetFilteredOnboardedAccountsRequest, opts ...grpc.CallOption) (*GetFilteredOnboardedAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredOnboardedAccountsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredOnboardedAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetLeaderboard(ctx context.Context, in *GetLeaderboardRequest, opts ...grpc.CallOption) (*GetLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetLeaderboardStats(ctx context.Context, in *GetLeaderboardStatsRequest, opts ...grpc.CallOption) (*GetLeaderboardStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLeaderboardStatsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetLeaderboardStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetCodes(ctx context.Context, in *GetCodesRequest, opts ...grpc.CallOption) (*GetCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCodesResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RedeemCode(ctx context.Context, in *RedeemCodeRequest, opts ...grpc.CallOption) (*RedeemCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemCodeResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RedeemCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) ConnectTwitter(ctx context.Context, in *ConnectTwitterRequest, opts ...grpc.CallOption) (*ConnectTwitterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectTwitterResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_ConnectTwitter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) CompleteOnboarding(ctx context.Context, in *CompleteOnboardingRequest, opts ...grpc.CallOption) (*CompleteOnboardingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteOnboardingResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_CompleteOnboarding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetUseTwitterHandle(ctx context.Context, in *SetUseTwitterHandleRequest, opts ...grpc.CallOption) (*SetUseTwitterHandleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUseTwitterHandleResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetUseTwitterHandle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetUseTwitterImage(ctx context.Context, in *SetUseTwitterImageRequest, opts ...grpc.CallOption) (*SetUseTwitterImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUseTwitterImageResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetUseTwitterImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RequestRandomProof(ctx context.Context, in *RequestRandomProofRequest, opts ...grpc.CallOption) (*RequestRandomProofResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestRandomProofResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RequestRandomProof_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SubmitCaptchaGame(ctx context.Context, in *SubmitCaptchaGameRequest, opts ...grpc.CallOption) (*SubmitCaptchaGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitCaptchaGameResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SubmitCaptchaGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RedeemStars(ctx context.Context, in *RedeemStarsRequest, opts ...grpc.CallOption) (*RedeemStarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedeemStarsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RedeemStars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFlappyLeaderboard(ctx context.Context, in *GetFlappyLeaderboardRequest, opts ...grpc.CallOption) (*GetFlappyLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFlappyLeaderboardResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFlappyLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetTurboHighScore(ctx context.Context, in *SetTurboHighScoreRequest, opts ...grpc.CallOption) (*SetTurboHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTurboHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetTurboHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SubmitQuizGame(ctx context.Context, in *SubmitQuizGameRequest, opts ...grpc.CallOption) (*SubmitQuizGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitQuizGameResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SubmitQuizGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetTurboLeaderboard(ctx context.Context, in *GetTurboLeaderboardRequest, opts ...grpc.CallOption) (*GetTurboLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTurboLeaderboardResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetTurboLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SubmitEthBlockMetadata(ctx context.Context, in *SubmitEthBlockMetadataRequest, opts ...grpc.CallOption) (*SubmitEthBlockMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitEthBlockMetadataResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SubmitEthBlockMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredEthBlockRequests(ctx context.Context, in *GetFilteredEthBlockRequestsRequest, opts ...grpc.CallOption) (*GetFilteredEthBlockRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredEthBlockRequestsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredEthBlockRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Set2048HighScore(ctx context.Context, in *Set2048HighScoreRequest, opts ...grpc.CallOption) (*Set2048HighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Set2048HighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Set2048HighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetVolleyballHighScore(ctx context.Context, in *SetVolleyballHighScoreRequest, opts ...grpc.CallOption) (*SetVolleyballHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetVolleyballHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetVolleyballHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetEthBlockRequestMetrics(ctx context.Context, in *GetEthBlockRequestMetricsRequest, opts ...grpc.CallOption) (*GetEthBlockRequestMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEthBlockRequestMetricsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetEthBlockRequestMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetTurboTimeTrialHighScore(ctx context.Context, in *SetTurboTimeTrialHighScoreRequest, opts ...grpc.CallOption) (*SetTurboTimeTrialHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetTurboTimeTrialHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetTurboTimeTrialHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetCoinCrazeHighScore(ctx context.Context, in *SetCoinCrazeHighScoreRequest, opts ...grpc.CallOption) (*SetCoinCrazeHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetCoinCrazeHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetCoinCrazeHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetLeanHighScore(ctx context.Context, in *SetLeanHighScoreRequest, opts ...grpc.CallOption) (*SetLeanHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetLeanHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetLeanHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetFlowHighScore(ctx context.Context, in *SetFlowHighScoreRequest, opts ...grpc.CallOption) (*SetFlowHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetFlowHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetFlowHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetRollupHighScore(ctx context.Context, in *SetRollupHighScoreRequest, opts ...grpc.CallOption) (*SetRollupHighScoreResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetRollupHighScoreResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetRollupHighScore_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetPendingStars(ctx context.Context, in *GetPendingStarsRequest, opts ...grpc.CallOption) (*GetPendingStarsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPendingStarsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetPendingStars_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetWhitelistStatus(ctx context.Context, in *GetWhitelistStatusRequest, opts ...grpc.CallOption) (*GetWhitelistStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWhitelistStatusResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetWhitelistStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) ClaimGpu(ctx context.Context, in *ClaimGpuRequest, opts ...grpc.CallOption) (*ClaimGpuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClaimGpuResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_ClaimGpu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetGpuVariant(ctx context.Context, in *SetGpuVariantRequest, opts ...grpc.CallOption) (*SetGpuVariantResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGpuVariantResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetGpuVariant_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) LinkWhitelistedTwitter(ctx context.Context, in *LinkWhitelistedTwitterRequest, opts ...grpc.CallOption) (*LinkWhitelistedTwitterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkWhitelistedTwitterResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_LinkWhitelistedTwitter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) RetrieveProvingKey(ctx context.Context, in *RetrieveProvingKeyRequest, opts ...grpc.CallOption) (*RetrieveProvingKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RetrieveProvingKeyResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_RetrieveProvingKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) LinkWhitelistedGithub(ctx context.Context, in *LinkWhitelistedGithubRequest, opts ...grpc.CallOption) (*LinkWhitelistedGithubResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkWhitelistedGithubResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_LinkWhitelistedGithub_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) LinkWhitelistedDiscord(ctx context.Context, in *LinkWhitelistedDiscordRequest, opts ...grpc.CallOption) (*LinkWhitelistedDiscordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkWhitelistedDiscordResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_LinkWhitelistedDiscord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverLeaderboard(ctx context.Context, in *GetProverLeaderboardRequest, opts ...grpc.CallOption) (*GetProverLeaderboardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverLeaderboardResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverLeaderboard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredGpus(ctx context.Context, in *GetFilteredGpusRequest, opts ...grpc.CallOption) (*GetFilteredGpusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredGpusResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredGpus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetGpuCoordinates(ctx context.Context, in *SetGpuCoordinatesRequest, opts ...grpc.CallOption) (*SetGpuCoordinatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetGpuCoordinatesResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetGpuCoordinates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetPoints(ctx context.Context, in *GetPointsRequest, opts ...grpc.CallOption) (*GetPointsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPointsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetPoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) ProcessClicks(ctx context.Context, in *ProcessClicksRequest, opts ...grpc.CallOption) (*ProcessClicksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessClicksResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_ProcessClicks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) PurchaseUpgrade(ctx context.Context, in *PurchaseUpgradeRequest, opts ...grpc.CallOption) (*PurchaseUpgradeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PurchaseUpgradeResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_PurchaseUpgrade_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) Bet(ctx context.Context, in *BetRequest, opts ...grpc.CallOption) (*BetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BetResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_Bet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetContestDetails(ctx context.Context, in *GetContestDetailsRequest, opts ...grpc.CallOption) (*GetContestDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContestDetailsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetContestDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetLatestContest(ctx context.Context, in *GetLatestContestRequest, opts ...grpc.CallOption) (*GetLatestContestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestContestResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetLatestContest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetContestBettors(ctx context.Context, in *GetContestBettorsRequest, opts ...grpc.CallOption) (*GetContestBettorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetContestBettorsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetContestBettors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetGpuMetrics(ctx context.Context, in *GetGpuMetricsRequest, opts ...grpc.CallOption) (*GetGpuMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGpuMetricsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetGpuMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredProverActivity(ctx context.Context, in *GetFilteredProverActivityRequest, opts ...grpc.CallOption) (*GetFilteredProverActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredProverActivityResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredProverActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverMetrics(ctx context.Context, in *GetProverMetricsRequest, opts ...grpc.CallOption) (*GetProverMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverMetricsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredBetHistory(ctx context.Context, in *GetFilteredBetHistoryRequest, opts ...grpc.CallOption) (*GetFilteredBetHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredBetHistoryResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredBetHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetGpuTeamStats(ctx context.Context, in *GetGpuTeamStatsRequest, opts ...grpc.CallOption) (*GetGpuTeamStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGpuTeamStatsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetGpuTeamStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetConfigValues(ctx context.Context, in *GetConfigValuesRequest, opts ...grpc.CallOption) (*GetConfigValuesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigValuesResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetConfigValues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverStats(ctx context.Context, in *GetProverStatsRequest, opts ...grpc.CallOption) (*GetProverStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverStatsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredProverStats(ctx context.Context, in *GetFilteredProverStatsRequest, opts ...grpc.CallOption) (*GetFilteredProverStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredProverStatsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredProverStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverStatsDetail(ctx context.Context, in *GetProverStatsDetailRequest, opts ...grpc.CallOption) (*GetProverStatsDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverStatsDetailResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverStatsDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverSearchResults(ctx context.Context, in *GetProverSearchResultsRequest, opts ...grpc.CallOption) (*GetProverSearchResultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverSearchResultsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverSearchResults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredBidHistory(ctx context.Context, in *GetFilteredBidHistoryRequest, opts ...grpc.CallOption) (*GetFilteredBidHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredBidHistoryResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredBidHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetTEEWhitelistStatus(ctx context.Context, in *GetTEEWhitelistStatusRequest, opts ...grpc.CallOption) (*GetTEEWhitelistStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTEEWhitelistStatusResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetTEEWhitelistStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetSettlementRequest(ctx context.Context, in *GetSettlementRequestRequest, opts ...grpc.CallOption) (*GetSettlementRequestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSettlementRequestResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetSettlementRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredSettlementRequests(ctx context.Context, in *GetFilteredSettlementRequestsRequest, opts ...grpc.CallOption) (*GetFilteredSettlementRequestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredSettlementRequestsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredSettlementRequests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredProvers(ctx context.Context, in *GetFilteredProversRequest, opts ...grpc.CallOption) (*GetFilteredProversResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredProversResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredProvers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetProverStakeBalance(ctx context.Context, in *GetProverStakeBalanceRequest, opts ...grpc.CallOption) (*GetProverStakeBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProverStakeBalanceResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetProverStakeBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredStakerStakeBalanceLogs(ctx context.Context, in *GetFilteredStakerStakeBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredStakerStakeBalanceLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredStakerStakeBalanceLogsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredStakerStakeBalanceLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredProverStakeBalanceLogs(ctx context.Context, in *GetFilteredProverStakeBalanceLogsRequest, opts ...grpc.CallOption) (*GetFilteredProverStakeBalanceLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredProverStakeBalanceLogsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredProverStakeBalanceLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetDelegationParams(ctx context.Context, in *GetDelegationParamsRequest, opts ...grpc.CallOption) (*GetDelegationParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDelegationParamsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetDelegationParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) SetDelegation(ctx context.Context, in *SetDelegationRequest, opts ...grpc.CallOption) (*SetDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDelegationResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_SetDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetDelegation(ctx context.Context, in *GetDelegationRequest, opts ...grpc.CallOption) (*GetDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDelegationResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proverNetworkClient) GetFilteredWithdrawalReceipts(ctx context.Context, in *GetFilteredWithdrawalReceiptsRequest, opts ...grpc.CallOption) (*GetFilteredWithdrawalReceiptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFilteredWithdrawalReceiptsResponse)
	err := c.cc.Invoke(ctx, ProverNetwork_GetFilteredWithdrawalReceipts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProverNetworkServer is the server API for ProverNetwork service.
// All implementations must embed UnimplementedProverNetworkServer
// for forward compatibility.
type ProverNetworkServer interface {
	// Creates a proof request.
	RequestProof(context.Context, *RequestProofRequest) (*RequestProofResponse, error)
	// Fulfills a proof request. Only callable by the assigned fulfiller.
	FulfillProof(context.Context, *FulfillProofRequest) (*FulfillProofResponse, error)
	// Executes a proof request. Only callable by the execution oracle.
	ExecuteProof(context.Context, *ExecuteProofRequest) (*ExecuteProofResponse, error)
	// Fails fulfillment. Only callable by the assigned fulfiller.
	FailFulfillment(context.Context, *FailFulfillmentRequest) (*FailFulfillmentResponse, error)
	// Get the status of a proof request.
	GetProofRequestStatus(context.Context, *GetProofRequestStatusRequest) (*GetProofRequestStatusResponse, error)
	// Get the details of a proof request.
	GetProofRequestDetails(context.Context, *GetProofRequestDetailsRequest) (*GetProofRequestDetailsResponse, error)
	// Get the proof requests that meet the filter criteria.
	GetFilteredProofRequests(context.Context, *GetFilteredProofRequestsRequest) (*GetFilteredProofRequestsResponse, error)
	// Subscribe to proof requests that meet the filter criteria.
	SubscribeProofRequests(*GetFilteredProofRequestsRequest, grpc.ServerStreamingServer[ProofRequest]) error
	// Search for proof requests, programs, and requesters.
	GetSearchResults(context.Context, *GetSearchResultsRequest) (*GetSearchResultsResponse, error)
	// Get metrics for proof requests.
	GetProofRequestMetrics(context.Context, *GetProofRequestMetricsRequest) (*GetProofRequestMetricsResponse, error)
	// Get time series data for proof requests.
	GetProofRequestGraph(context.Context, *GetProofRequestGraphRequest) (*GetProofRequestGraphResponse, error)
	// Get analytics graphs for proof requests.
	GetAnalyticsGraphs(context.Context, *GetAnalyticsGraphsRequest) (*GetAnalyticsGraphsResponse, error)
	// Get overview graphs for proof requests.
	GetOverviewGraphs(context.Context, *GetOverviewGraphsRequest) (*GetOverviewGraphsResponse, error)
	// Get network proof request parameters.
	GetProofRequestParams(context.Context, *GetProofRequestParamsRequest) (*GetProofRequestParamsResponse, error)
	// Get the nonce of the account.
	GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error)
	// Set the name of the account.
	SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameResponse, error)
	// Get the name of the account.
	GetAccountName(context.Context, *GetAccountNameRequest) (*GetAccountNameResponse, error)
	// Get whether the account has signed the terms.
	GetTermsSignature(context.Context, *GetTermsSignatureRequest) (*GetTermsSignatureResponse, error)
	// Set whether the account has signed the terms.
	SetTermsSignature(context.Context, *SetTermsSignatureRequest) (*SetTermsSignatureResponse, error)
	// Get all the information about an account.
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	// Get the owner of an account. Returns itself if the account is not delegated.
	GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerResponse, error)
	// Get metadata about a program.
	GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error)
	// Create a new program. Must be called before requesting proofs.
	CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error)
	// Set the name of the program. Only callable by the owner.
	SetProgramName(context.Context, *SetProgramNameRequest) (*SetProgramNameResponse, error)
	// Get the available balance of an account.
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	// Get the balance logs that meet the filter criteria.
	GetFilteredBalanceLogs(context.Context, *GetFilteredBalanceLogsRequest) (*GetFilteredBalanceLogsResponse, error)
	// Add credit to an account.
	AddCredit(context.Context, *AddCreditRequest) (*AddCreditResponse, error)
	// Get the latest processed block in the bridge.
	GetLatestBridgeBlock(context.Context, *GetLatestBridgeBlockRequest) (*GetLatestBridgeBlockResponse, error)
	// Get the gas price estimate for a given fulfillment strategy.
	GetGasPriceEstimate(context.Context, *GetGasPriceEstimateRequest) (*GetGasPriceEstimateResponse, error)
	// Get the details of a transaction.
	GetTransactionDetails(context.Context, *GetTransactionDetailsRequest) (*GetTransactionDetailsResponse, error)
	// Add a charge to an account.
	AddReservedCharge(context.Context, *AddReservedChargeRequest) (*AddReservedChargeResponse, error)
	// Get prorated billing summary by month for a specified payer.
	GetBillingSummary(context.Context, *GetBillingSummaryRequest) (*GetBillingSummaryResponse, error)
	// Update the charge type price for a reservation.
	UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error)
	// Get filtered and paginated clusters/fulfillers with prices.
	GetFilteredClusters(context.Context, *GetFilteredClustersRequest) (*GetFilteredClustersResponse, error)
	// Get usage summary by month for a specified payer.
	GetUsageSummary(context.Context, *GetUsageSummaryRequest) (*GetUsageSummaryResponse, error)
	// Transfer $PROVE from one account to another.
	Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	// Get withdraw parameters.
	GetWithdrawParams(context.Context, *GetWithdrawParamsRequest) (*GetWithdrawParamsResponse, error)
	// Withdraw $PROVE from an account.
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	// Get the reservations that meet the filter criteria.
	GetFilteredReservations(context.Context, *GetFilteredReservationsRequest) (*GetFilteredReservationsResponse, error)
	// Add a reservation for a requester.
	AddReservation(context.Context, *AddReservationRequest) (*AddReservationResponse, error)
	// Remove a reservation for a requester.
	RemoveReservation(context.Context, *RemoveReservationRequest) (*RemoveReservationResponse, error)
	// Bid for a proof request. Provers that want to be assigned this request must first
	// bid on it.
	Bid(context.Context, *BidRequest) (*BidResponse, error)
	// Settle the bids on a proof request to choose the assigned prover. Only callable by
	// the approved auctioneer.
	Settle(context.Context, *SettleRequest) (*SettleResponse, error)
	// Get the provers that have historically had reliable uptime.
	GetProversByUptime(context.Context, *GetProversByUptimeRequest) (*GetProversByUptimeResponse, error)
	// Sign in with Ethereum
	SignIn(context.Context, *SignInRequest) (*SignInResponse, error)
	// Get the accounts that meet the filter criteria.
	GetOnboardedAccountsCount(context.Context, *GetOnboardedAccountsCountRequest) (*GetOnboardedAccountsCountResponse, error)
	// Get the accounts that have joined the leaderboard.
	GetFilteredOnboardedAccounts(context.Context, *GetFilteredOnboardedAccountsRequest) (*GetFilteredOnboardedAccountsResponse, error)
	// Get the leaderboard.
	GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error)
	// Get the leaderboard stats for a given account.
	GetLeaderboardStats(context.Context, *GetLeaderboardStatsRequest) (*GetLeaderboardStatsResponse, error)
	// Get codes.
	GetCodes(context.Context, *GetCodesRequest) (*GetCodesResponse, error)
	// Redeem a code.
	RedeemCode(context.Context, *RedeemCodeRequest) (*RedeemCodeResponse, error)
	// Connect a Twitter account.
	ConnectTwitter(context.Context, *ConnectTwitterRequest) (*ConnectTwitterResponse, error)
	// Complete onboarding.
	CompleteOnboarding(context.Context, *CompleteOnboardingRequest) (*CompleteOnboardingResponse, error)
	// Set if a user should display their Twitter handle.
	SetUseTwitterHandle(context.Context, *SetUseTwitterHandleRequest) (*SetUseTwitterHandleResponse, error)
	// Set if a user should display their Twitter profile picture.
	SetUseTwitterImage(context.Context, *SetUseTwitterImageRequest) (*SetUseTwitterImageResponse, error)
	// Request a random proof.
	RequestRandomProof(context.Context, *RequestRandomProofRequest) (*RequestRandomProofResponse, error)
	// Submit answers for the captcha game.
	SubmitCaptchaGame(context.Context, *SubmitCaptchaGameRequest) (*SubmitCaptchaGameResponse, error)
	// Redeem stars.
	RedeemStars(context.Context, *RedeemStarsRequest) (*RedeemStarsResponse, error)
	// Get flappy leaderboard.
	GetFlappyLeaderboard(context.Context, *GetFlappyLeaderboardRequest) (*GetFlappyLeaderboardResponse, error)
	// Set the turbo game high score.
	SetTurboHighScore(context.Context, *SetTurboHighScoreRequest) (*SetTurboHighScoreResponse, error)
	// Submit answers for the quiz game.
	SubmitQuizGame(context.Context, *SubmitQuizGameRequest) (*SubmitQuizGameResponse, error)
	// Get the turbo game leaderboard.
	GetTurboLeaderboard(context.Context, *GetTurboLeaderboardRequest) (*GetTurboLeaderboardResponse, error)
	// Submit ETH block metadata.
	SubmitEthBlockMetadata(context.Context, *SubmitEthBlockMetadataRequest) (*SubmitEthBlockMetadataResponse, error)
	// Get ETH block requests that meet the filter criteria.
	GetFilteredEthBlockRequests(context.Context, *GetFilteredEthBlockRequestsRequest) (*GetFilteredEthBlockRequestsResponse, error)
	// Set the 2048 game high score.
	Set2048HighScore(context.Context, *Set2048HighScoreRequest) (*Set2048HighScoreResponse, error)
	// Set the volleyball game high score.
	SetVolleyballHighScore(context.Context, *SetVolleyballHighScoreRequest) (*SetVolleyballHighScoreResponse, error)
	// Get ETH block proof requests metrics.
	GetEthBlockRequestMetrics(context.Context, *GetEthBlockRequestMetricsRequest) (*GetEthBlockRequestMetricsResponse, error)
	// Set the turbo time trial high score.
	SetTurboTimeTrialHighScore(context.Context, *SetTurboTimeTrialHighScoreRequest) (*SetTurboTimeTrialHighScoreResponse, error)
	// Set the coin craze high score.
	SetCoinCrazeHighScore(context.Context, *SetCoinCrazeHighScoreRequest) (*SetCoinCrazeHighScoreResponse, error)
	// Set the lean high score.
	SetLeanHighScore(context.Context, *SetLeanHighScoreRequest) (*SetLeanHighScoreResponse, error)
	// Set the flow high score.
	SetFlowHighScore(context.Context, *SetFlowHighScoreRequest) (*SetFlowHighScoreResponse, error)
	// Set the rollup high score.
	SetRollupHighScore(context.Context, *SetRollupHighScoreRequest) (*SetRollupHighScoreResponse, error)
	// Get the pending stars for an account.
	GetPendingStars(context.Context, *GetPendingStarsRequest) (*GetPendingStarsResponse, error)
	// Check if address or social identity is whitelisted.
	GetWhitelistStatus(context.Context, *GetWhitelistStatusRequest) (*GetWhitelistStatusResponse, error)
	// Claim a gpu.
	ClaimGpu(context.Context, *ClaimGpuRequest) (*ClaimGpuResponse, error)
	// Set the gpu variant.
	SetGpuVariant(context.Context, *SetGpuVariantRequest) (*SetGpuVariantResponse, error)
	// Link a whitelisted twitter account.
	LinkWhitelistedTwitter(context.Context, *LinkWhitelistedTwitterRequest) (*LinkWhitelistedTwitterResponse, error)
	// Retrieve the proving key for your account. Must have claimed a gpu and self-delegated to
	// yourself.
	RetrieveProvingKey(context.Context, *RetrieveProvingKeyRequest) (*RetrieveProvingKeyResponse, error)
	// Link a whitelisted github account.
	LinkWhitelistedGithub(context.Context, *LinkWhitelistedGithubRequest) (*LinkWhitelistedGithubResponse, error)
	// Link a whitelisted discord account.
	LinkWhitelistedDiscord(context.Context, *LinkWhitelistedDiscordRequest) (*LinkWhitelistedDiscordResponse, error)
	// Get prover leaderboard.
	GetProverLeaderboard(context.Context, *GetProverLeaderboardRequest) (*GetProverLeaderboardResponse, error)
	// Get filtered gpus.
	GetFilteredGpus(context.Context, *GetFilteredGpusRequest) (*GetFilteredGpusResponse, error)
	// Set the gpu coordinates.
	SetGpuCoordinates(context.Context, *SetGpuCoordinatesRequest) (*SetGpuCoordinatesResponse, error)
	// Get points.
	GetPoints(context.Context, *GetPointsRequest) (*GetPointsResponse, error)
	// Process clicks.
	ProcessClicks(context.Context, *ProcessClicksRequest) (*ProcessClicksResponse, error)
	// Purchase upgrade.
	PurchaseUpgrade(context.Context, *PurchaseUpgradeRequest) (*PurchaseUpgradeResponse, error)
	// Place a bet.
	Bet(context.Context, *BetRequest) (*BetResponse, error)
	// Get the status of a proof contest.
	GetContestDetails(context.Context, *GetContestDetailsRequest) (*GetContestDetailsResponse, error)
	// Get latest contest id.
	GetLatestContest(context.Context, *GetLatestContestRequest) (*GetLatestContestResponse, error)
	// Get contest bettors.
	GetContestBettors(context.Context, *GetContestBettorsRequest) (*GetContestBettorsResponse, error)
	// Get gpu metrics.
	GetGpuMetrics(context.Context, *GetGpuMetricsRequest) (*GetGpuMetricsResponse, error)
	// Get filtered prover activity.
	GetFilteredProverActivity(context.Context, *GetFilteredProverActivityRequest) (*GetFilteredProverActivityResponse, error)
	// Get prover metrics.
	GetProverMetrics(context.Context, *GetProverMetricsRequest) (*GetProverMetricsResponse, error)
	// Get filtered bet history.
	GetFilteredBetHistory(context.Context, *GetFilteredBetHistoryRequest) (*GetFilteredBetHistoryResponse, error)
	// Get gpu team stats.
	GetGpuTeamStats(context.Context, *GetGpuTeamStatsRequest) (*GetGpuTeamStatsResponse, error)
	// Get the config values.
	GetConfigValues(context.Context, *GetConfigValuesRequest) (*GetConfigValuesResponse, error)
	// Get metrics for a specific prover
	GetProverStats(context.Context, *GetProverStatsRequest) (*GetProverStatsResponse, error)
	// Get statistics for all provers with pagination
	GetFilteredProverStats(context.Context, *GetFilteredProverStatsRequest) (*GetFilteredProverStatsResponse, error)
	// Get detailed statistics for a single prover by address
	GetProverStatsDetail(context.Context, *GetProverStatsDetailRequest) (*GetProverStatsDetailResponse, error)
	// Get search results for provers
	GetProverSearchResults(context.Context, *GetProverSearchResultsRequest) (*GetProverSearchResultsResponse, error)
	// Get paginated auction history
	GetFilteredBidHistory(context.Context, *GetFilteredBidHistoryRequest) (*GetFilteredBidHistoryResponse, error)
	// Check if the user is whitelisted to use the TEE service.
	GetTEEWhitelistStatus(context.Context, *GetTEEWhitelistStatusRequest) (*GetTEEWhitelistStatusResponse, error)
	// Settlement
	//
	// These methods are for settling orders to L1.
	GetSettlementRequest(context.Context, *GetSettlementRequestRequest) (*GetSettlementRequestResponse, error)
	GetFilteredSettlementRequests(context.Context, *GetFilteredSettlementRequestsRequest) (*GetFilteredSettlementRequestsResponse, error)
	// Get the provers that meet the filter criteria.
	GetFilteredProvers(context.Context, *GetFilteredProversRequest) (*GetFilteredProversResponse, error)
	// Get the available balance of a prover.
	GetProverStakeBalance(context.Context, *GetProverStakeBalanceRequest) (*GetProverStakeBalanceResponse, error)
	// Get the staker balance logs that meet the filter criteria.
	GetFilteredStakerStakeBalanceLogs(context.Context, *GetFilteredStakerStakeBalanceLogsRequest) (*GetFilteredStakerStakeBalanceLogsResponse, error)
	// Get the prover balance logs that meet the filter criteria.
	GetFilteredProverStakeBalanceLogs(context.Context, *GetFilteredProverStakeBalanceLogsRequest) (*GetFilteredProverStakeBalanceLogsResponse, error)
	// Get the delegation parameters.
	GetDelegationParams(context.Context, *GetDelegationParamsRequest) (*GetDelegationParamsResponse, error)
	// Set a delegation.
	SetDelegation(context.Context, *SetDelegationRequest) (*SetDelegationResponse, error)
	// Get a delegation.
	GetDelegation(context.Context, *GetDelegationRequest) (*GetDelegationResponse, error)
	// Get the withdrawal receipts of an account.
	GetFilteredWithdrawalReceipts(context.Context, *GetFilteredWithdrawalReceiptsRequest) (*GetFilteredWithdrawalReceiptsResponse, error)
	mustEmbedUnimplementedProverNetworkServer()
}

// UnimplementedProverNetworkServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProverNetworkServer struct{}

func (UnimplementedProverNetworkServer) RequestProof(context.Context, *RequestProofRequest) (*RequestProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestProof not implemented")
}
func (UnimplementedProverNetworkServer) FulfillProof(context.Context, *FulfillProofRequest) (*FulfillProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FulfillProof not implemented")
}
func (UnimplementedProverNetworkServer) ExecuteProof(context.Context, *ExecuteProofRequest) (*ExecuteProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteProof not implemented")
}
func (UnimplementedProverNetworkServer) FailFulfillment(context.Context, *FailFulfillmentRequest) (*FailFulfillmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailFulfillment not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestStatus(context.Context, *GetProofRequestStatusRequest) (*GetProofRequestStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestStatus not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestDetails(context.Context, *GetProofRequestDetailsRequest) (*GetProofRequestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestDetails not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredProofRequests(context.Context, *GetFilteredProofRequestsRequest) (*GetFilteredProofRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredProofRequests not implemented")
}
func (UnimplementedProverNetworkServer) SubscribeProofRequests(*GetFilteredProofRequestsRequest, grpc.ServerStreamingServer[ProofRequest]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeProofRequests not implemented")
}
func (UnimplementedProverNetworkServer) GetSearchResults(context.Context, *GetSearchResultsRequest) (*GetSearchResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchResults not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestMetrics(context.Context, *GetProofRequestMetricsRequest) (*GetProofRequestMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestMetrics not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestGraph(context.Context, *GetProofRequestGraphRequest) (*GetProofRequestGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestGraph not implemented")
}
func (UnimplementedProverNetworkServer) GetAnalyticsGraphs(context.Context, *GetAnalyticsGraphsRequest) (*GetAnalyticsGraphsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAnalyticsGraphs not implemented")
}
func (UnimplementedProverNetworkServer) GetOverviewGraphs(context.Context, *GetOverviewGraphsRequest) (*GetOverviewGraphsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOverviewGraphs not implemented")
}
func (UnimplementedProverNetworkServer) GetProofRequestParams(context.Context, *GetProofRequestParamsRequest) (*GetProofRequestParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProofRequestParams not implemented")
}
func (UnimplementedProverNetworkServer) GetNonce(context.Context, *GetNonceRequest) (*GetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNonce not implemented")
}
func (UnimplementedProverNetworkServer) SetAccountName(context.Context, *SetAccountNameRequest) (*SetAccountNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountName not implemented")
}
func (UnimplementedProverNetworkServer) GetAccountName(context.Context, *GetAccountNameRequest) (*GetAccountNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountName not implemented")
}
func (UnimplementedProverNetworkServer) GetTermsSignature(context.Context, *GetTermsSignatureRequest) (*GetTermsSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTermsSignature not implemented")
}
func (UnimplementedProverNetworkServer) SetTermsSignature(context.Context, *SetTermsSignatureRequest) (*SetTermsSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTermsSignature not implemented")
}
func (UnimplementedProverNetworkServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedProverNetworkServer) GetOwner(context.Context, *GetOwnerRequest) (*GetOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwner not implemented")
}
func (UnimplementedProverNetworkServer) GetProgram(context.Context, *GetProgramRequest) (*GetProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgram not implemented")
}
func (UnimplementedProverNetworkServer) CreateProgram(context.Context, *CreateProgramRequest) (*CreateProgramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProgram not implemented")
}
func (UnimplementedProverNetworkServer) SetProgramName(context.Context, *SetProgramNameRequest) (*SetProgramNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProgramName not implemented")
}
func (UnimplementedProverNetworkServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredBalanceLogs(context.Context, *GetFilteredBalanceLogsRequest) (*GetFilteredBalanceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredBalanceLogs not implemented")
}
func (UnimplementedProverNetworkServer) AddCredit(context.Context, *AddCreditRequest) (*AddCreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredit not implemented")
}
func (UnimplementedProverNetworkServer) GetLatestBridgeBlock(context.Context, *GetLatestBridgeBlockRequest) (*GetLatestBridgeBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBridgeBlock not implemented")
}
func (UnimplementedProverNetworkServer) GetGasPriceEstimate(context.Context, *GetGasPriceEstimateRequest) (*GetGasPriceEstimateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasPriceEstimate not implemented")
}
func (UnimplementedProverNetworkServer) GetTransactionDetails(context.Context, *GetTransactionDetailsRequest) (*GetTransactionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionDetails not implemented")
}
func (UnimplementedProverNetworkServer) AddReservedCharge(context.Context, *AddReservedChargeRequest) (*AddReservedChargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReservedCharge not implemented")
}
func (UnimplementedProverNetworkServer) GetBillingSummary(context.Context, *GetBillingSummaryRequest) (*GetBillingSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBillingSummary not implemented")
}
func (UnimplementedProverNetworkServer) UpdatePrice(context.Context, *UpdatePriceRequest) (*UpdatePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrice not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredClusters(context.Context, *GetFilteredClustersRequest) (*GetFilteredClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredClusters not implemented")
}
func (UnimplementedProverNetworkServer) GetUsageSummary(context.Context, *GetUsageSummaryRequest) (*GetUsageSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageSummary not implemented")
}
func (UnimplementedProverNetworkServer) Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (UnimplementedProverNetworkServer) GetWithdrawParams(context.Context, *GetWithdrawParamsRequest) (*GetWithdrawParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawParams not implemented")
}
func (UnimplementedProverNetworkServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredReservations(context.Context, *GetFilteredReservationsRequest) (*GetFilteredReservationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredReservations not implemented")
}
func (UnimplementedProverNetworkServer) AddReservation(context.Context, *AddReservationRequest) (*AddReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReservation not implemented")
}
func (UnimplementedProverNetworkServer) RemoveReservation(context.Context, *RemoveReservationRequest) (*RemoveReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReservation not implemented")
}
func (UnimplementedProverNetworkServer) Bid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bid not implemented")
}
func (UnimplementedProverNetworkServer) Settle(context.Context, *SettleRequest) (*SettleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Settle not implemented")
}
func (UnimplementedProverNetworkServer) GetProversByUptime(context.Context, *GetProversByUptimeRequest) (*GetProversByUptimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProversByUptime not implemented")
}
func (UnimplementedProverNetworkServer) SignIn(context.Context, *SignInRequest) (*SignInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignIn not implemented")
}
func (UnimplementedProverNetworkServer) GetOnboardedAccountsCount(context.Context, *GetOnboardedAccountsCountRequest) (*GetOnboardedAccountsCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOnboardedAccountsCount not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredOnboardedAccounts(context.Context, *GetFilteredOnboardedAccountsRequest) (*GetFilteredOnboardedAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredOnboardedAccounts not implemented")
}
func (UnimplementedProverNetworkServer) GetLeaderboard(context.Context, *GetLeaderboardRequest) (*GetLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboard not implemented")
}
func (UnimplementedProverNetworkServer) GetLeaderboardStats(context.Context, *GetLeaderboardStatsRequest) (*GetLeaderboardStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderboardStats not implemented")
}
func (UnimplementedProverNetworkServer) GetCodes(context.Context, *GetCodesRequest) (*GetCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCodes not implemented")
}
func (UnimplementedProverNetworkServer) RedeemCode(context.Context, *RedeemCodeRequest) (*RedeemCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemCode not implemented")
}
func (UnimplementedProverNetworkServer) ConnectTwitter(context.Context, *ConnectTwitterRequest) (*ConnectTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTwitter not implemented")
}
func (UnimplementedProverNetworkServer) CompleteOnboarding(context.Context, *CompleteOnboardingRequest) (*CompleteOnboardingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOnboarding not implemented")
}
func (UnimplementedProverNetworkServer) SetUseTwitterHandle(context.Context, *SetUseTwitterHandleRequest) (*SetUseTwitterHandleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUseTwitterHandle not implemented")
}
func (UnimplementedProverNetworkServer) SetUseTwitterImage(context.Context, *SetUseTwitterImageRequest) (*SetUseTwitterImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUseTwitterImage not implemented")
}
func (UnimplementedProverNetworkServer) RequestRandomProof(context.Context, *RequestRandomProofRequest) (*RequestRandomProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestRandomProof not implemented")
}
func (UnimplementedProverNetworkServer) SubmitCaptchaGame(context.Context, *SubmitCaptchaGameRequest) (*SubmitCaptchaGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCaptchaGame not implemented")
}
func (UnimplementedProverNetworkServer) RedeemStars(context.Context, *RedeemStarsRequest) (*RedeemStarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemStars not implemented")
}
func (UnimplementedProverNetworkServer) GetFlappyLeaderboard(context.Context, *GetFlappyLeaderboardRequest) (*GetFlappyLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlappyLeaderboard not implemented")
}
func (UnimplementedProverNetworkServer) SetTurboHighScore(context.Context, *SetTurboHighScoreRequest) (*SetTurboHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTurboHighScore not implemented")
}
func (UnimplementedProverNetworkServer) SubmitQuizGame(context.Context, *SubmitQuizGameRequest) (*SubmitQuizGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitQuizGame not implemented")
}
func (UnimplementedProverNetworkServer) GetTurboLeaderboard(context.Context, *GetTurboLeaderboardRequest) (*GetTurboLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTurboLeaderboard not implemented")
}
func (UnimplementedProverNetworkServer) SubmitEthBlockMetadata(context.Context, *SubmitEthBlockMetadataRequest) (*SubmitEthBlockMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitEthBlockMetadata not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredEthBlockRequests(context.Context, *GetFilteredEthBlockRequestsRequest) (*GetFilteredEthBlockRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredEthBlockRequests not implemented")
}
func (UnimplementedProverNetworkServer) Set2048HighScore(context.Context, *Set2048HighScoreRequest) (*Set2048HighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set2048HighScore not implemented")
}
func (UnimplementedProverNetworkServer) SetVolleyballHighScore(context.Context, *SetVolleyballHighScoreRequest) (*SetVolleyballHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolleyballHighScore not implemented")
}
func (UnimplementedProverNetworkServer) GetEthBlockRequestMetrics(context.Context, *GetEthBlockRequestMetricsRequest) (*GetEthBlockRequestMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEthBlockRequestMetrics not implemented")
}
func (UnimplementedProverNetworkServer) SetTurboTimeTrialHighScore(context.Context, *SetTurboTimeTrialHighScoreRequest) (*SetTurboTimeTrialHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTurboTimeTrialHighScore not implemented")
}
func (UnimplementedProverNetworkServer) SetCoinCrazeHighScore(context.Context, *SetCoinCrazeHighScoreRequest) (*SetCoinCrazeHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCoinCrazeHighScore not implemented")
}
func (UnimplementedProverNetworkServer) SetLeanHighScore(context.Context, *SetLeanHighScoreRequest) (*SetLeanHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLeanHighScore not implemented")
}
func (UnimplementedProverNetworkServer) SetFlowHighScore(context.Context, *SetFlowHighScoreRequest) (*SetFlowHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFlowHighScore not implemented")
}
func (UnimplementedProverNetworkServer) SetRollupHighScore(context.Context, *SetRollupHighScoreRequest) (*SetRollupHighScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRollupHighScore not implemented")
}
func (UnimplementedProverNetworkServer) GetPendingStars(context.Context, *GetPendingStarsRequest) (*GetPendingStarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingStars not implemented")
}
func (UnimplementedProverNetworkServer) GetWhitelistStatus(context.Context, *GetWhitelistStatusRequest) (*GetWhitelistStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhitelistStatus not implemented")
}
func (UnimplementedProverNetworkServer) ClaimGpu(context.Context, *ClaimGpuRequest) (*ClaimGpuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimGpu not implemented")
}
func (UnimplementedProverNetworkServer) SetGpuVariant(context.Context, *SetGpuVariantRequest) (*SetGpuVariantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGpuVariant not implemented")
}
func (UnimplementedProverNetworkServer) LinkWhitelistedTwitter(context.Context, *LinkWhitelistedTwitterRequest) (*LinkWhitelistedTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkWhitelistedTwitter not implemented")
}
func (UnimplementedProverNetworkServer) RetrieveProvingKey(context.Context, *RetrieveProvingKeyRequest) (*RetrieveProvingKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveProvingKey not implemented")
}
func (UnimplementedProverNetworkServer) LinkWhitelistedGithub(context.Context, *LinkWhitelistedGithubRequest) (*LinkWhitelistedGithubResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkWhitelistedGithub not implemented")
}
func (UnimplementedProverNetworkServer) LinkWhitelistedDiscord(context.Context, *LinkWhitelistedDiscordRequest) (*LinkWhitelistedDiscordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkWhitelistedDiscord not implemented")
}
func (UnimplementedProverNetworkServer) GetProverLeaderboard(context.Context, *GetProverLeaderboardRequest) (*GetProverLeaderboardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverLeaderboard not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredGpus(context.Context, *GetFilteredGpusRequest) (*GetFilteredGpusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredGpus not implemented")
}
func (UnimplementedProverNetworkServer) SetGpuCoordinates(context.Context, *SetGpuCoordinatesRequest) (*SetGpuCoordinatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGpuCoordinates not implemented")
}
func (UnimplementedProverNetworkServer) GetPoints(context.Context, *GetPointsRequest) (*GetPointsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoints not implemented")
}
func (UnimplementedProverNetworkServer) ProcessClicks(context.Context, *ProcessClicksRequest) (*ProcessClicksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessClicks not implemented")
}
func (UnimplementedProverNetworkServer) PurchaseUpgrade(context.Context, *PurchaseUpgradeRequest) (*PurchaseUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseUpgrade not implemented")
}
func (UnimplementedProverNetworkServer) Bet(context.Context, *BetRequest) (*BetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bet not implemented")
}
func (UnimplementedProverNetworkServer) GetContestDetails(context.Context, *GetContestDetailsRequest) (*GetContestDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestDetails not implemented")
}
func (UnimplementedProverNetworkServer) GetLatestContest(context.Context, *GetLatestContestRequest) (*GetLatestContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestContest not implemented")
}
func (UnimplementedProverNetworkServer) GetContestBettors(context.Context, *GetContestBettorsRequest) (*GetContestBettorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContestBettors not implemented")
}
func (UnimplementedProverNetworkServer) GetGpuMetrics(context.Context, *GetGpuMetricsRequest) (*GetGpuMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpuMetrics not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredProverActivity(context.Context, *GetFilteredProverActivityRequest) (*GetFilteredProverActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredProverActivity not implemented")
}
func (UnimplementedProverNetworkServer) GetProverMetrics(context.Context, *GetProverMetricsRequest) (*GetProverMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverMetrics not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredBetHistory(context.Context, *GetFilteredBetHistoryRequest) (*GetFilteredBetHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredBetHistory not implemented")
}
func (UnimplementedProverNetworkServer) GetGpuTeamStats(context.Context, *GetGpuTeamStatsRequest) (*GetGpuTeamStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGpuTeamStats not implemented")
}
func (UnimplementedProverNetworkServer) GetConfigValues(context.Context, *GetConfigValuesRequest) (*GetConfigValuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigValues not implemented")
}
func (UnimplementedProverNetworkServer) GetProverStats(context.Context, *GetProverStatsRequest) (*GetProverStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverStats not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredProverStats(context.Context, *GetFilteredProverStatsRequest) (*GetFilteredProverStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredProverStats not implemented")
}
func (UnimplementedProverNetworkServer) GetProverStatsDetail(context.Context, *GetProverStatsDetailRequest) (*GetProverStatsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverStatsDetail not implemented")
}
func (UnimplementedProverNetworkServer) GetProverSearchResults(context.Context, *GetProverSearchResultsRequest) (*GetProverSearchResultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverSearchResults not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredBidHistory(context.Context, *GetFilteredBidHistoryRequest) (*GetFilteredBidHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredBidHistory not implemented")
}
func (UnimplementedProverNetworkServer) GetTEEWhitelistStatus(context.Context, *GetTEEWhitelistStatusRequest) (*GetTEEWhitelistStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTEEWhitelistStatus not implemented")
}
func (UnimplementedProverNetworkServer) GetSettlementRequest(context.Context, *GetSettlementRequestRequest) (*GetSettlementRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettlementRequest not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredSettlementRequests(context.Context, *GetFilteredSettlementRequestsRequest) (*GetFilteredSettlementRequestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredSettlementRequests not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredProvers(context.Context, *GetFilteredProversRequest) (*GetFilteredProversResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredProvers not implemented")
}
func (UnimplementedProverNetworkServer) GetProverStakeBalance(context.Context, *GetProverStakeBalanceRequest) (*GetProverStakeBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProverStakeBalance not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredStakerStakeBalanceLogs(context.Context, *GetFilteredStakerStakeBalanceLogsRequest) (*GetFilteredStakerStakeBalanceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredStakerStakeBalanceLogs not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredProverStakeBalanceLogs(context.Context, *GetFilteredProverStakeBalanceLogsRequest) (*GetFilteredProverStakeBalanceLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredProverStakeBalanceLogs not implemented")
}
func (UnimplementedProverNetworkServer) GetDelegationParams(context.Context, *GetDelegationParamsRequest) (*GetDelegationParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegationParams not implemented")
}
func (UnimplementedProverNetworkServer) SetDelegation(context.Context, *SetDelegationRequest) (*SetDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDelegation not implemented")
}
func (UnimplementedProverNetworkServer) GetDelegation(context.Context, *GetDelegationRequest) (*GetDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegation not implemented")
}
func (UnimplementedProverNetworkServer) GetFilteredWithdrawalReceipts(context.Context, *GetFilteredWithdrawalReceiptsRequest) (*GetFilteredWithdrawalReceiptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilteredWithdrawalReceipts not implemented")
}
func (UnimplementedProverNetworkServer) mustEmbedUnimplementedProverNetworkServer() {}
func (UnimplementedProverNetworkServer) testEmbeddedByValue()                       {}

// UnsafeProverNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProverNetworkServer will
// result in compilation errors.
type UnsafeProverNetworkServer interface {
	mustEmbedUnimplementedProverNetworkServer()
}

func RegisterProverNetworkServer(s grpc.ServiceRegistrar, srv ProverNetworkServer) {
	// If the following call pancis, it indicates UnimplementedProverNetworkServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProverNetwork_ServiceDesc, srv)
}

func _ProverNetwork_RequestProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RequestProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RequestProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RequestProof(ctx, req.(*RequestProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_FulfillProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FulfillProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).FulfillProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_FulfillProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).FulfillProof(ctx, req.(*FulfillProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_ExecuteProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).ExecuteProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_ExecuteProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).ExecuteProof(ctx, req.(*ExecuteProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_FailFulfillment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailFulfillmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).FailFulfillment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_FailFulfillment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).FailFulfillment(ctx, req.(*FailFulfillmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestStatus(ctx, req.(*GetProofRequestStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestDetails(ctx, req.(*GetProofRequestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredProofRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredProofRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredProofRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredProofRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredProofRequests(ctx, req.(*GetFilteredProofRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SubscribeProofRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFilteredProofRequestsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProverNetworkServer).SubscribeProofRequests(m, &grpc.GenericServerStream[GetFilteredProofRequestsRequest, ProofRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ProverNetwork_SubscribeProofRequestsServer = grpc.ServerStreamingServer[ProofRequest]

func _ProverNetwork_GetSearchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetSearchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetSearchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetSearchResults(ctx, req.(*GetSearchResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestMetrics(ctx, req.(*GetProofRequestMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestGraph_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestGraph(ctx, req.(*GetProofRequestGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetAnalyticsGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAnalyticsGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetAnalyticsGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetAnalyticsGraphs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetAnalyticsGraphs(ctx, req.(*GetAnalyticsGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetOverviewGraphs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOverviewGraphsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetOverviewGraphs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetOverviewGraphs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetOverviewGraphs(ctx, req.(*GetOverviewGraphsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProofRequestParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProofRequestParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProofRequestParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProofRequestParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProofRequestParams(ctx, req.(*GetProofRequestParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetNonce_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetNonce(ctx, req.(*GetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetAccountName(ctx, req.(*SetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetAccountName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetAccountName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetAccountName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetAccountName(ctx, req.(*GetAccountNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetTermsSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTermsSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetTermsSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetTermsSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetTermsSignature(ctx, req.(*GetTermsSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetTermsSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTermsSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetTermsSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetTermsSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetTermsSignature(ctx, req.(*SetTermsSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetOwner(ctx, req.(*GetOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProgram(ctx, req.(*GetProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_CreateProgram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProgramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).CreateProgram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_CreateProgram_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).CreateProgram(ctx, req.(*CreateProgramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetProgramName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProgramNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetProgramName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetProgramName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetProgramName(ctx, req.(*SetProgramNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredBalanceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredBalanceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredBalanceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredBalanceLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredBalanceLogs(ctx, req.(*GetFilteredBalanceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_AddCredit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).AddCredit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_AddCredit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).AddCredit(ctx, req.(*AddCreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetLatestBridgeBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBridgeBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetLatestBridgeBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetLatestBridgeBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetLatestBridgeBlock(ctx, req.(*GetLatestBridgeBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetGasPriceEstimate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasPriceEstimateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetGasPriceEstimate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetGasPriceEstimate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetGasPriceEstimate(ctx, req.(*GetGasPriceEstimateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetTransactionDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetTransactionDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetTransactionDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetTransactionDetails(ctx, req.(*GetTransactionDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_AddReservedCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReservedChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).AddReservedCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_AddReservedCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).AddReservedCharge(ctx, req.(*AddReservedChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetBillingSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBillingSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetBillingSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetBillingSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetBillingSummary(ctx, req.(*GetBillingSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_UpdatePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).UpdatePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_UpdatePrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).UpdatePrice(ctx, req.(*UpdatePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredClusters(ctx, req.(*GetFilteredClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetUsageSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetUsageSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetUsageSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetUsageSummary(ctx, req.(*GetUsageSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Transfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetWithdrawParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetWithdrawParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetWithdrawParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetWithdrawParams(ctx, req.(*GetWithdrawParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Withdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredReservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredReservationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredReservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredReservations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredReservations(ctx, req.(*GetFilteredReservationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_AddReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).AddReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_AddReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).AddReservation(ctx, req.(*AddReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RemoveReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RemoveReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RemoveReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RemoveReservation(ctx, req.(*RemoveReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Bid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Bid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Bid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Bid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Settle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Settle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Settle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Settle(ctx, req.(*SettleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProversByUptime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProversByUptimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProversByUptime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProversByUptime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProversByUptime(ctx, req.(*GetProversByUptimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SignIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetOnboardedAccountsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnboardedAccountsCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetOnboardedAccountsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetOnboardedAccountsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetOnboardedAccountsCount(ctx, req.(*GetOnboardedAccountsCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredOnboardedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredOnboardedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredOnboardedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredOnboardedAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredOnboardedAccounts(ctx, req.(*GetFilteredOnboardedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetLeaderboard(ctx, req.(*GetLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetLeaderboardStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderboardStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetLeaderboardStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetLeaderboardStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetLeaderboardStats(ctx, req.(*GetLeaderboardStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetCodes(ctx, req.(*GetCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RedeemCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RedeemCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RedeemCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RedeemCode(ctx, req.(*RedeemCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_ConnectTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).ConnectTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_ConnectTwitter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).ConnectTwitter(ctx, req.(*ConnectTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_CompleteOnboarding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteOnboardingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).CompleteOnboarding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_CompleteOnboarding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).CompleteOnboarding(ctx, req.(*CompleteOnboardingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetUseTwitterHandle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUseTwitterHandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetUseTwitterHandle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetUseTwitterHandle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetUseTwitterHandle(ctx, req.(*SetUseTwitterHandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetUseTwitterImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUseTwitterImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetUseTwitterImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetUseTwitterImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetUseTwitterImage(ctx, req.(*SetUseTwitterImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RequestRandomProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRandomProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RequestRandomProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RequestRandomProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RequestRandomProof(ctx, req.(*RequestRandomProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SubmitCaptchaGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCaptchaGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SubmitCaptchaGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SubmitCaptchaGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SubmitCaptchaGame(ctx, req.(*SubmitCaptchaGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RedeemStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedeemStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RedeemStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RedeemStars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RedeemStars(ctx, req.(*RedeemStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFlappyLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlappyLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFlappyLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFlappyLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFlappyLeaderboard(ctx, req.(*GetFlappyLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetTurboHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTurboHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetTurboHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetTurboHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetTurboHighScore(ctx, req.(*SetTurboHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SubmitQuizGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitQuizGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SubmitQuizGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SubmitQuizGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SubmitQuizGame(ctx, req.(*SubmitQuizGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetTurboLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTurboLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetTurboLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetTurboLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetTurboLeaderboard(ctx, req.(*GetTurboLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SubmitEthBlockMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitEthBlockMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SubmitEthBlockMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SubmitEthBlockMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SubmitEthBlockMetadata(ctx, req.(*SubmitEthBlockMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredEthBlockRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredEthBlockRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredEthBlockRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredEthBlockRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredEthBlockRequests(ctx, req.(*GetFilteredEthBlockRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Set2048HighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Set2048HighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Set2048HighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Set2048HighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Set2048HighScore(ctx, req.(*Set2048HighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetVolleyballHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolleyballHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetVolleyballHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetVolleyballHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetVolleyballHighScore(ctx, req.(*SetVolleyballHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetEthBlockRequestMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEthBlockRequestMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetEthBlockRequestMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetEthBlockRequestMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetEthBlockRequestMetrics(ctx, req.(*GetEthBlockRequestMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetTurboTimeTrialHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTurboTimeTrialHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetTurboTimeTrialHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetTurboTimeTrialHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetTurboTimeTrialHighScore(ctx, req.(*SetTurboTimeTrialHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetCoinCrazeHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCoinCrazeHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetCoinCrazeHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetCoinCrazeHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetCoinCrazeHighScore(ctx, req.(*SetCoinCrazeHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetLeanHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLeanHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetLeanHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetLeanHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetLeanHighScore(ctx, req.(*SetLeanHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetFlowHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFlowHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetFlowHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetFlowHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetFlowHighScore(ctx, req.(*SetFlowHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetRollupHighScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRollupHighScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetRollupHighScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetRollupHighScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetRollupHighScore(ctx, req.(*SetRollupHighScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetPendingStars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingStarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetPendingStars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetPendingStars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetPendingStars(ctx, req.(*GetPendingStarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetWhitelistStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWhitelistStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetWhitelistStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetWhitelistStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetWhitelistStatus(ctx, req.(*GetWhitelistStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_ClaimGpu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimGpuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).ClaimGpu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_ClaimGpu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).ClaimGpu(ctx, req.(*ClaimGpuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetGpuVariant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGpuVariantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetGpuVariant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetGpuVariant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetGpuVariant(ctx, req.(*SetGpuVariantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_LinkWhitelistedTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkWhitelistedTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).LinkWhitelistedTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_LinkWhitelistedTwitter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).LinkWhitelistedTwitter(ctx, req.(*LinkWhitelistedTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_RetrieveProvingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetrieveProvingKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).RetrieveProvingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_RetrieveProvingKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).RetrieveProvingKey(ctx, req.(*RetrieveProvingKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_LinkWhitelistedGithub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkWhitelistedGithubRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).LinkWhitelistedGithub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_LinkWhitelistedGithub_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).LinkWhitelistedGithub(ctx, req.(*LinkWhitelistedGithubRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_LinkWhitelistedDiscord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkWhitelistedDiscordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).LinkWhitelistedDiscord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_LinkWhitelistedDiscord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).LinkWhitelistedDiscord(ctx, req.(*LinkWhitelistedDiscordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverLeaderboard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverLeaderboardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverLeaderboard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverLeaderboard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverLeaderboard(ctx, req.(*GetProverLeaderboardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredGpus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredGpus(ctx, req.(*GetFilteredGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetGpuCoordinates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGpuCoordinatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetGpuCoordinates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetGpuCoordinates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetGpuCoordinates(ctx, req.(*SetGpuCoordinatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetPoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetPoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetPoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetPoints(ctx, req.(*GetPointsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_ProcessClicks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessClicksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).ProcessClicks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_ProcessClicks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).ProcessClicks(ctx, req.(*ProcessClicksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_PurchaseUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseUpgradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).PurchaseUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_PurchaseUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).PurchaseUpgrade(ctx, req.(*PurchaseUpgradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_Bet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).Bet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_Bet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).Bet(ctx, req.(*BetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetContestDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetContestDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetContestDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetContestDetails(ctx, req.(*GetContestDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetLatestContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetLatestContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetLatestContest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetLatestContest(ctx, req.(*GetLatestContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetContestBettors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContestBettorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetContestBettors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetContestBettors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetContestBettors(ctx, req.(*GetContestBettorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetGpuMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpuMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetGpuMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetGpuMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetGpuMetrics(ctx, req.(*GetGpuMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredProverActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredProverActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredProverActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredProverActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredProverActivity(ctx, req.(*GetFilteredProverActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverMetrics(ctx, req.(*GetProverMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredBetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredBetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredBetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredBetHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredBetHistory(ctx, req.(*GetFilteredBetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetGpuTeamStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpuTeamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetGpuTeamStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetGpuTeamStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetGpuTeamStats(ctx, req.(*GetGpuTeamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetConfigValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetConfigValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetConfigValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetConfigValues(ctx, req.(*GetConfigValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverStats(ctx, req.(*GetProverStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredProverStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredProverStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredProverStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredProverStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredProverStats(ctx, req.(*GetFilteredProverStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverStatsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverStatsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverStatsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverStatsDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverStatsDetail(ctx, req.(*GetProverStatsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverSearchResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverSearchResultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverSearchResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverSearchResults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverSearchResults(ctx, req.(*GetProverSearchResultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredBidHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredBidHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredBidHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredBidHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredBidHistory(ctx, req.(*GetFilteredBidHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetTEEWhitelistStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTEEWhitelistStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetTEEWhitelistStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetTEEWhitelistStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetTEEWhitelistStatus(ctx, req.(*GetTEEWhitelistStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetSettlementRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettlementRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetSettlementRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetSettlementRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetSettlementRequest(ctx, req.(*GetSettlementRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredSettlementRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredSettlementRequestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredSettlementRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredSettlementRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredSettlementRequests(ctx, req.(*GetFilteredSettlementRequestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredProvers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredProversRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredProvers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredProvers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredProvers(ctx, req.(*GetFilteredProversRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetProverStakeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProverStakeBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetProverStakeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetProverStakeBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetProverStakeBalance(ctx, req.(*GetProverStakeBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredStakerStakeBalanceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredStakerStakeBalanceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredStakerStakeBalanceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredStakerStakeBalanceLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredStakerStakeBalanceLogs(ctx, req.(*GetFilteredStakerStakeBalanceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredProverStakeBalanceLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredProverStakeBalanceLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredProverStakeBalanceLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredProverStakeBalanceLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredProverStakeBalanceLogs(ctx, req.(*GetFilteredProverStakeBalanceLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetDelegationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegationParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetDelegationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetDelegationParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetDelegationParams(ctx, req.(*GetDelegationParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_SetDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).SetDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_SetDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).SetDelegation(ctx, req.(*SetDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetDelegation(ctx, req.(*GetDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProverNetwork_GetFilteredWithdrawalReceipts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilteredWithdrawalReceiptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProverNetworkServer).GetFilteredWithdrawalReceipts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProverNetwork_GetFilteredWithdrawalReceipts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProverNetworkServer).GetFilteredWithdrawalReceipts(ctx, req.(*GetFilteredWithdrawalReceiptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProverNetwork_ServiceDesc is the grpc.ServiceDesc for ProverNetwork service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProverNetwork_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.ProverNetwork",
	HandlerType: (*ProverNetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestProof",
			Handler:    _ProverNetwork_RequestProof_Handler,
		},
		{
			MethodName: "FulfillProof",
			Handler:    _ProverNetwork_FulfillProof_Handler,
		},
		{
			MethodName: "ExecuteProof",
			Handler:    _ProverNetwork_ExecuteProof_Handler,
		},
		{
			MethodName: "FailFulfillment",
			Handler:    _ProverNetwork_FailFulfillment_Handler,
		},
		{
			MethodName: "GetProofRequestStatus",
			Handler:    _ProverNetwork_GetProofRequestStatus_Handler,
		},
		{
			MethodName: "GetProofRequestDetails",
			Handler:    _ProverNetwork_GetProofRequestDetails_Handler,
		},
		{
			MethodName: "GetFilteredProofRequests",
			Handler:    _ProverNetwork_GetFilteredProofRequests_Handler,
		},
		{
			MethodName: "GetSearchResults",
			Handler:    _ProverNetwork_GetSearchResults_Handler,
		},
		{
			MethodName: "GetProofRequestMetrics",
			Handler:    _ProverNetwork_GetProofRequestMetrics_Handler,
		},
		{
			MethodName: "GetProofRequestGraph",
			Handler:    _ProverNetwork_GetProofRequestGraph_Handler,
		},
		{
			MethodName: "GetAnalyticsGraphs",
			Handler:    _ProverNetwork_GetAnalyticsGraphs_Handler,
		},
		{
			MethodName: "GetOverviewGraphs",
			Handler:    _ProverNetwork_GetOverviewGraphs_Handler,
		},
		{
			MethodName: "GetProofRequestParams",
			Handler:    _ProverNetwork_GetProofRequestParams_Handler,
		},
		{
			MethodName: "GetNonce",
			Handler:    _ProverNetwork_GetNonce_Handler,
		},
		{
			MethodName: "SetAccountName",
			Handler:    _ProverNetwork_SetAccountName_Handler,
		},
		{
			MethodName: "GetAccountName",
			Handler:    _ProverNetwork_GetAccountName_Handler,
		},
		{
			MethodName: "GetTermsSignature",
			Handler:    _ProverNetwork_GetTermsSignature_Handler,
		},
		{
			MethodName: "SetTermsSignature",
			Handler:    _ProverNetwork_SetTermsSignature_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ProverNetwork_GetAccount_Handler,
		},
		{
			MethodName: "GetOwner",
			Handler:    _ProverNetwork_GetOwner_Handler,
		},
		{
			MethodName: "GetProgram",
			Handler:    _ProverNetwork_GetProgram_Handler,
		},
		{
			MethodName: "CreateProgram",
			Handler:    _ProverNetwork_CreateProgram_Handler,
		},
		{
			MethodName: "SetProgramName",
			Handler:    _ProverNetwork_SetProgramName_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _ProverNetwork_GetBalance_Handler,
		},
		{
			MethodName: "GetFilteredBalanceLogs",
			Handler:    _ProverNetwork_GetFilteredBalanceLogs_Handler,
		},
		{
			MethodName: "AddCredit",
			Handler:    _ProverNetwork_AddCredit_Handler,
		},
		{
			MethodName: "GetLatestBridgeBlock",
			Handler:    _ProverNetwork_GetLatestBridgeBlock_Handler,
		},
		{
			MethodName: "GetGasPriceEstimate",
			Handler:    _ProverNetwork_GetGasPriceEstimate_Handler,
		},
		{
			MethodName: "GetTransactionDetails",
			Handler:    _ProverNetwork_GetTransactionDetails_Handler,
		},
		{
			MethodName: "AddReservedCharge",
			Handler:    _ProverNetwork_AddReservedCharge_Handler,
		},
		{
			MethodName: "GetBillingSummary",
			Handler:    _ProverNetwork_GetBillingSummary_Handler,
		},
		{
			MethodName: "UpdatePrice",
			Handler:    _ProverNetwork_UpdatePrice_Handler,
		},
		{
			MethodName: "GetFilteredClusters",
			Handler:    _ProverNetwork_GetFilteredClusters_Handler,
		},
		{
			MethodName: "GetUsageSummary",
			Handler:    _ProverNetwork_GetUsageSummary_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _ProverNetwork_Transfer_Handler,
		},
		{
			MethodName: "GetWithdrawParams",
			Handler:    _ProverNetwork_GetWithdrawParams_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _ProverNetwork_Withdraw_Handler,
		},
		{
			MethodName: "GetFilteredReservations",
			Handler:    _ProverNetwork_GetFilteredReservations_Handler,
		},
		{
			MethodName: "AddReservation",
			Handler:    _ProverNetwork_AddReservation_Handler,
		},
		{
			MethodName: "RemoveReservation",
			Handler:    _ProverNetwork_RemoveReservation_Handler,
		},
		{
			MethodName: "Bid",
			Handler:    _ProverNetwork_Bid_Handler,
		},
		{
			MethodName: "Settle",
			Handler:    _ProverNetwork_Settle_Handler,
		},
		{
			MethodName: "GetProversByUptime",
			Handler:    _ProverNetwork_GetProversByUptime_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _ProverNetwork_SignIn_Handler,
		},
		{
			MethodName: "GetOnboardedAccountsCount",
			Handler:    _ProverNetwork_GetOnboardedAccountsCount_Handler,
		},
		{
			MethodName: "GetFilteredOnboardedAccounts",
			Handler:    _ProverNetwork_GetFilteredOnboardedAccounts_Handler,
		},
		{
			MethodName: "GetLeaderboard",
			Handler:    _ProverNetwork_GetLeaderboard_Handler,
		},
		{
			MethodName: "GetLeaderboardStats",
			Handler:    _ProverNetwork_GetLeaderboardStats_Handler,
		},
		{
			MethodName: "GetCodes",
			Handler:    _ProverNetwork_GetCodes_Handler,
		},
		{
			MethodName: "RedeemCode",
			Handler:    _ProverNetwork_RedeemCode_Handler,
		},
		{
			MethodName: "ConnectTwitter",
			Handler:    _ProverNetwork_ConnectTwitter_Handler,
		},
		{
			MethodName: "CompleteOnboarding",
			Handler:    _ProverNetwork_CompleteOnboarding_Handler,
		},
		{
			MethodName: "SetUseTwitterHandle",
			Handler:    _ProverNetwork_SetUseTwitterHandle_Handler,
		},
		{
			MethodName: "SetUseTwitterImage",
			Handler:    _ProverNetwork_SetUseTwitterImage_Handler,
		},
		{
			MethodName: "RequestRandomProof",
			Handler:    _ProverNetwork_RequestRandomProof_Handler,
		},
		{
			MethodName: "SubmitCaptchaGame",
			Handler:    _ProverNetwork_SubmitCaptchaGame_Handler,
		},
		{
			MethodName: "RedeemStars",
			Handler:    _ProverNetwork_RedeemStars_Handler,
		},
		{
			MethodName: "GetFlappyLeaderboard",
			Handler:    _ProverNetwork_GetFlappyLeaderboard_Handler,
		},
		{
			MethodName: "SetTurboHighScore",
			Handler:    _ProverNetwork_SetTurboHighScore_Handler,
		},
		{
			MethodName: "SubmitQuizGame",
			Handler:    _ProverNetwork_SubmitQuizGame_Handler,
		},
		{
			MethodName: "GetTurboLeaderboard",
			Handler:    _ProverNetwork_GetTurboLeaderboard_Handler,
		},
		{
			MethodName: "SubmitEthBlockMetadata",
			Handler:    _ProverNetwork_SubmitEthBlockMetadata_Handler,
		},
		{
			MethodName: "GetFilteredEthBlockRequests",
			Handler:    _ProverNetwork_GetFilteredEthBlockRequests_Handler,
		},
		{
			MethodName: "Set2048HighScore",
			Handler:    _ProverNetwork_Set2048HighScore_Handler,
		},
		{
			MethodName: "SetVolleyballHighScore",
			Handler:    _ProverNetwork_SetVolleyballHighScore_Handler,
		},
		{
			MethodName: "GetEthBlockRequestMetrics",
			Handler:    _ProverNetwork_GetEthBlockRequestMetrics_Handler,
		},
		{
			MethodName: "SetTurboTimeTrialHighScore",
			Handler:    _ProverNetwork_SetTurboTimeTrialHighScore_Handler,
		},
		{
			MethodName: "SetCoinCrazeHighScore",
			Handler:    _ProverNetwork_SetCoinCrazeHighScore_Handler,
		},
		{
			MethodName: "SetLeanHighScore",
			Handler:    _ProverNetwork_SetLeanHighScore_Handler,
		},
		{
			MethodName: "SetFlowHighScore",
			Handler:    _ProverNetwork_SetFlowHighScore_Handler,
		},
		{
			MethodName: "SetRollupHighScore",
			Handler:    _ProverNetwork_SetRollupHighScore_Handler,
		},
		{
			MethodName: "GetPendingStars",
			Handler:    _ProverNetwork_GetPendingStars_Handler,
		},
		{
			MethodName: "GetWhitelistStatus",
			Handler:    _ProverNetwork_GetWhitelistStatus_Handler,
		},
		{
			MethodName: "ClaimGpu",
			Handler:    _ProverNetwork_ClaimGpu_Handler,
		},
		{
			MethodName: "SetGpuVariant",
			Handler:    _ProverNetwork_SetGpuVariant_Handler,
		},
		{
			MethodName: "LinkWhitelistedTwitter",
			Handler:    _ProverNetwork_LinkWhitelistedTwitter_Handler,
		},
		{
			MethodName: "RetrieveProvingKey",
			Handler:    _ProverNetwork_RetrieveProvingKey_Handler,
		},
		{
			MethodName: "LinkWhitelistedGithub",
			Handler:    _ProverNetwork_LinkWhitelistedGithub_Handler,
		},
		{
			MethodName: "LinkWhitelistedDiscord",
			Handler:    _ProverNetwork_LinkWhitelistedDiscord_Handler,
		},
		{
			MethodName: "GetProverLeaderboard",
			Handler:    _ProverNetwork_GetProverLeaderboard_Handler,
		},
		{
			MethodName: "GetFilteredGpus",
			Handler:    _ProverNetwork_GetFilteredGpus_Handler,
		},
		{
			MethodName: "SetGpuCoordinates",
			Handler:    _ProverNetwork_SetGpuCoordinates_Handler,
		},
		{
			MethodName: "GetPoints",
			Handler:    _ProverNetwork_GetPoints_Handler,
		},
		{
			MethodName: "ProcessClicks",
			Handler:    _ProverNetwork_ProcessClicks_Handler,
		},
		{
			MethodName: "PurchaseUpgrade",
			Handler:    _ProverNetwork_PurchaseUpgrade_Handler,
		},
		{
			MethodName: "Bet",
			Handler:    _ProverNetwork_Bet_Handler,
		},
		{
			MethodName: "GetContestDetails",
			Handler:    _ProverNetwork_GetContestDetails_Handler,
		},
		{
			MethodName: "GetLatestContest",
			Handler:    _ProverNetwork_GetLatestContest_Handler,
		},
		{
			MethodName: "GetContestBettors",
			Handler:    _ProverNetwork_GetContestBettors_Handler,
		},
		{
			MethodName: "GetGpuMetrics",
			Handler:    _ProverNetwork_GetGpuMetrics_Handler,
		},
		{
			MethodName: "GetFilteredProverActivity",
			Handler:    _ProverNetwork_GetFilteredProverActivity_Handler,
		},
		{
			MethodName: "GetProverMetrics",
			Handler:    _ProverNetwork_GetProverMetrics_Handler,
		},
		{
			MethodName: "GetFilteredBetHistory",
			Handler:    _ProverNetwork_GetFilteredBetHistory_Handler,
		},
		{
			MethodName: "GetGpuTeamStats",
			Handler:    _ProverNetwork_GetGpuTeamStats_Handler,
		},
		{
			MethodName: "GetConfigValues",
			Handler:    _ProverNetwork_GetConfigValues_Handler,
		},
		{
			MethodName: "GetProverStats",
			Handler:    _ProverNetwork_GetProverStats_Handler,
		},
		{
			MethodName: "GetFilteredProverStats",
			Handler:    _ProverNetwork_GetFilteredProverStats_Handler,
		},
		{
			MethodName: "GetProverStatsDetail",
			Handler:    _ProverNetwork_GetProverStatsDetail_Handler,
		},
		{
			MethodName: "GetProverSearchResults",
			Handler:    _ProverNetwork_GetProverSearchResults_Handler,
		},
		{
			MethodName: "GetFilteredBidHistory",
			Handler:    _ProverNetwork_GetFilteredBidHistory_Handler,
		},
		{
			MethodName: "GetTEEWhitelistStatus",
			Handler:    _ProverNetwork_GetTEEWhitelistStatus_Handler,
		},
		{
			MethodName: "GetSettlementRequest",
			Handler:    _ProverNetwork_GetSettlementRequest_Handler,
		},
		{
			MethodName: "GetFilteredSettlementRequests",
			Handler:    _ProverNetwork_GetFilteredSettlementRequests_Handler,
		},
		{
			MethodName: "GetFilteredProvers",
			Handler:    _ProverNetwork_GetFilteredProvers_Handler,
		},
		{
			MethodName: "GetProverStakeBalance",
			Handler:    _ProverNetwork_GetProverStakeBalance_Handler,
		},
		{
			MethodName: "GetFilteredStakerStakeBalanceLogs",
			Handler:    _ProverNetwork_GetFilteredStakerStakeBalanceLogs_Handler,
		},
		{
			MethodName: "GetFilteredProverStakeBalanceLogs",
			Handler:    _ProverNetwork_GetFilteredProverStakeBalanceLogs_Handler,
		},
		{
			MethodName: "GetDelegationParams",
			Handler:    _ProverNetwork_GetDelegationParams_Handler,
		},
		{
			MethodName: "SetDelegation",
			Handler:    _ProverNetwork_SetDelegation_Handler,
		},
		{
			MethodName: "GetDelegation",
			Handler:    _ProverNetwork_GetDelegation_Handler,
		},
		{
			MethodName: "GetFilteredWithdrawalReceipts",
			Handler:    _ProverNetwork_GetFilteredWithdrawalReceipts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeProofRequests",
			Handler:       _ProverNetwork_SubscribeProofRequests_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network.proto",
}
